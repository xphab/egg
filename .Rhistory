result=data.frame(matrix(,OTUnum,OTUnum))
len=rowSums(fasta.m[]!="-")
for(i in 1:(OTUnum-1))
{
result[i,i]=0
for(j in (i+1):OTUnum)
{
result[i,j]=sum(fasta.m[i,]!=fasta.m[j,])/(max(len[i],len[j]))
result[j,i]=result[i,j]
}
}
result[OTUnum,OTUnum]=0
names(result)=OTUname
rownames(result)=OTUname
result
}
hdist(f)
f
j
i
i=1
j=2
sum(colSums(fasta.m[c(i,j),][]=="-")!=2)
f
c4=c("t","-","-")
u=c(f,c4)
u
u=cbind(f,c4)
u
hdist<-function(fasta.m)
{
fasta.m=data.frame(fasta.m)
OTUname=rownames(fasta.m)
OTUnum=nrow(fasta.m)
result=data.frame(matrix(,OTUnum,OTUnum))
for(i in 1:(OTUnum-1))
{
result[i,i]=0
for(j in (i+1):OTUnum)
{
len=sum(colSums(fasta.m[c(i,j),][]=="-")!=2)
result[i,j]=sum(fasta.m[i,]!=fasta.m[j,])/len
result[j,i]=result[i,j]
}
}
result[OTUnum,OTUnum]=0
names(result)=OTUname
rownames(result)=OTUname
result
}
hdist(u)
u
u[3,3]="c"
u
hdist(u)
u
v
c
c[1:10
]
t=c[1:10]
t
t
save(t,file="test.txt")
help(save)
help(write)
t
save(t,file="test.txt")
save(t,file="test2.txt")
write.csv(t,file="test.txt")
write.csv(t,file="test.csv")
help(dput)
dput(t,file="test3.txt")
dput(t,file="test3.csv")
u
ww=list()
ww[[1]]=u
v
ww[[2]]=v
t
x
j
y
a
f
ww[[3]]=f
ww[[4]]=ww
ww
dput(ww,file="text4.csv")
dput(ww,file="text4.txt")
c1
c2
sum(c1!=c2)
f
c1==f
c1==t(f)
f[1,]==f
f[1,]==t(f)
t(f[1,])==f
t(f[1,])
u[1,]==t(u)
u[2,]==t(u)
u[2,]!=t(u)
colSum(u[2,]!=t(u))
colSums(u[2,]!=t(u))
colSums(u[2,]!=t(u))/4
hdist<-function(fasta.m)
{
# calculate Hamming distance between aligned sequences of OTUs #
# by Daliang Ning (ningdaliang@gmail.com) on 2014.11.8 #
fasta.m=data.frame(fasta.m)
OTUname=rownames(fasta.m)
OTUnum=nrow(fasta.m)
result=data.frame(matrix(,OTUnum,OTUnum))
bpnum=ncol(fasta.m)
f.t=t(fasta.m)
for(i in 1:OTUnum)
{
message("i=",i," in ",OTUnum)
result[i,]=colSums(fasta.m[i,]!=f.t)
}
result=result/bpnum
names(result)=OTUname
rownames(result)=OTUname
result
}
u
hdist(u)
i=1
fasta.m=u
fasta.m=data.frame(fasta.m)
OTUname=rownames(fasta.m)
OTUnum=nrow(fasta.m)
result=data.frame(matrix(,OTUnum,OTUnum))
bpnum=ncol(fasta.m)
bpnum
f.t=t(fasta.m)
i=1
message("i=",i," in ",OTUnum)
result[i,]=colSums(fasta.m[i,]!=f.t)
fasta.m[i,]
u
fasta.m[i,]!=f.t
f.t
fasta.m[i,]==f.t
fasta.m[i,]==fasta.m
u[i,]==u
as.vector(fasta.m[i,])==fasta.m
as.vector(fasta.m[i,])
as.matrix(fasta.m[i,])==fasta.m
as.matrix(fasta.m[i,])==t(fasta.m)
as.matrix(fasta.m[i,])==t(as.matrix(fasta.m))
as.matrix(fasta.m[i,])==t(as.matrix(fasta.m))
f.m=as.matrix(fasta.m)
f.m
f.m[1,]==t(f.m)
f.tt=t(f.m)
f.m[1,]==f.tt
hdist<-function(fasta.m)
{
# calculate Hamming distance between aligned sequences of OTUs #
# by Daliang Ning (ningdaliang@gmail.com) on 2014.11.8 #
fasta.m=data.frame(fasta.m)
OTUname=rownames(fasta.m)
OTUnum=nrow(fasta.m)
result=data.frame(matrix(,OTUnum,OTUnum))
bpnum=ncol(fasta.m)
f.m=as.matrix(fasta.m)
f.t=t(fasta.m)
for(i in 1:OTUnum)
{
message("i=",i," in ",OTUnum)
result[i,]=colSums(f.m[i,]!=f.t)
}
result=result/bpnum
names(result)=OTUname
rownames(result)=OTUname
result
}
u
hdist(u)
"a"-"b"
v=u
v[v[]=="-"]=NA
V
v
v2=v[2,]
v2
v2==t(v)
v=u
v[v[]=="-"]=NULL
v
v[v[]=="-"]=NAN
v[v[]=="-"]=nan
u
u[1,]==t(u)
u[2,]==t(u)
(u[2,]==t(u))&[t(u)[]=="-"]
(u[2,]==t(u))&(t(u)[]=="-")
colSums((u[2,]==t(u))&(t(u)[]=="-"))
colSums((u[2,]!=t(u))|(t(u)[]!="-"))
hdist<-function(fasta.m)
{
# calculate Hamming distance between aligned sequences of OTUs #
# by Daliang Ning (ningdaliang@gmail.com) on 2014.11.8 #
fasta.m=data.frame(fasta.m)
OTUname=rownames(fasta.m)
OTUnum=nrow(fasta.m)
result=data.frame(matrix(,OTUnum,OTUnum))
bpnum=ncol(fasta.m)
f.m=as.matrix(fasta.m)
f.t=t(fasta.m)
logic2=(f.t[]!="-")
for(i in 1:OTUnum)
{
message("i=",i," in ",OTUnum)
logic=(f.m[i,]!=f.t)
result[i,]=colSums(logic)/(colSums(logic|logic2))
}
names(result)=OTUname
rownames(result)=OTUname
result
}
u
hdist(u)
q()
c=1:10
c[2:5]=0
c
m=matrix(,4,4)
m
m=matrix(0,4,4)
m
m[1,]=1:4
m
m[2,2:4]=2:4
m
m[3,3:4]=3:4
m[4,4]=7
m
m+t(m)
u
u[2,]==t(u)
u[2,]==t(u)[,2:3]
hdist<-function(fasta.m)
{
# calculate Hamming distance between aligned sequences of OTUs #
# by Daliang Ning (ningdaliang@gmail.com) on 2014.11.9 #
fasta.m=data.frame(fasta.m)
OTUname=rownames(fasta.m)
OTUnum=nrow(fasta.m)
result=data.frame(matrix(,OTUnum,OTUnum))
bpnum=ncol(fasta.m)
f.m=as.matrix(fasta.m)
f.t=t(fasta.m)
logic2=(f.t[]!="-")
for(i in 1:OTUnum)
{
message("i=",i," in ",OTUnum)
logic=(f.m[i,]!=f.t[,i:OTUnum])
result[i,i:OTUnum]=colSums(logic)/(colSums(logic|logic2[,i:OTUnum]))
}
result=result+t(result)
names(result)=OTUname
rownames(result)=OTUname
result
}
hdist(u)
fasta.m=u
fasta.m=data.frame(fasta.m)
OTUname=rownames(fasta.m)
OTUnum=nrow(fasta.m)
result=data.frame(matrix(,OTUnum,OTUnum))
bpnum=ncol(fasta.m)
f.m=as.matrix(fasta.m)
f.t=t(fasta.m)
logic2=(f.t[]!="-")
for(i in 1:OTUnum)
{}
i=1
message("i=",i," in ",OTUnum)
logic=(f.m[i,]!=f.t[,i:OTUnum])
result[i,i:OTUnum]=colSums(logic)/(colSums(logic|logic2[,i:OTUnum]))
result=result+t(result)
names(result)=OTUname
rownames(result)=OTUname
result
i=2
message("i=",i," in ",OTUnum)
logic=(f.m[i,]!=f.t[,i:OTUnum])
result[i,i:OTUnum]=colSums(logic)/(colSums(logic|logic2[,i:OTUnum]))
for(i in 1:OTUnum)
{
message("i=",i," in ",OTUnum)
logic=(f.m[i,]!=f.t[,i:OTUnum])
result[i,i:OTUnum]=colSums(logic)/(colSums(logic|logic2[,i:OTUnum]))
}
i=3
message("i=",i," in ",OTUnum)
logic=(f.m[i,]!=f.t[,i:OTUnum])
result[i,i:OTUnum]=colSums(logic)/(colSums(logic|logic2[,i:OTUnum]))
hdist<-function(fasta.m)
{
# calculate Hamming distance between aligned sequences of OTUs #
# by Daliang Ning (ningdaliang@gmail.com) on 2014.11.9 #
fasta.m=data.frame(fasta.m)
OTUname=rownames(fasta.m)
OTUnum=nrow(fasta.m)
result=data.frame(matrix(0,OTUnum,OTUnum))
bpnum=ncol(fasta.m)
f.m=as.matrix(fasta.m)
f.t=t(fasta.m)
logic2=(f.t[]!="-")
for(i in 1:(OTUnum-1))
{
message("i=",i," in ",OTUnum)
logic=(f.m[i,]!=f.t[,i:OTUnum])
result[i,i:OTUnum]=colSums(logic)/(colSums(logic|logic2[,i:OTUnum]))
}
result=result+t(result)
names(result)=OTUname
rownames(result)=OTUname
result
}
hdist(u)
q()
q()
a=data.frame(matrix(2,3,4))
a
a==2
a[a[]==2]
a[a[]==2]=1
a
a[2,2]=2
a
a[a[]==1]=0
a
a[a[]==0]=""
a
a=data.frame(matrix(2,3,4))
a
a[2,2]=1
a
a[a==2]=0
a
a[a==0]=""
a
com.a
setwd=("C:/Users/Daliang/Dropbox/ToolDevelop/github/egg")
# install.packages("vegan")
#########################################
## input ##
inp=read.table(file="input/1.Input.csv",header=T,sep=",",row.names=1,as.is=TRUE)
wd=inp[1,1]# work directory name
code.wd=inp[2,1] # the directory you save the Rcode
prefix=inp[3,1] # project name
read.limit=as.numeric(inp[4,1]) # min reads per sample
gene=inp[5,1] #ITS or 16S
its.conf=as.numeric(inp[6,1]) # ITS classification confidence threshold
memory.G=as.numeric(inp[7,1])# memory limitation
com.file=inp[8,1] # file name of otu table before resample
treat.file=inp[9,1] # file name of treatment information
samplist.file=inp[10,1] # file for sample name correction
comr.file=inp[11,1] # file name of otu table after resample
classif.file=inp[12,1] # classification file
rm.samplist=inp[13,1] # samples that need be removed. name as "remove.samp.csv"
## loading files ##
library(vegan)
memory.limit(size=memory.G*1024)
com.raw=read.table(file=paste("input/",com.file,sep=""),header=T,sep="\t",row.names=1);com.raw=t(com.raw)
if(grepl("tabular",com.file))
{
rownames(com.raw)=sub("abel.","",rownames(com.raw))
rownames(com.raw)=sub("_",".",rownames(com.raw))
}
dim(com.raw)
write.csv(data.frame(sample=rownames(com.raw)),file=paste("output/",prefix,".00.oldSampName.csv",sep=""))
samplist=read.table(file=paste("input/",samplist.file,sep=""),header=T,sep=",",row.names=1)
sum(is.na(match(samplist[,1],rownames(com.raw))))
## 0.1 ## prepare otu table for resample
source(file=paste(code.wd,"/minread.r",sep=""))
source(file=paste(code.wd,"/rename.samp.r",sep=""))
com.read=minread(com.raw,samplist,prefix,read.limit=read.limit,write.otu=TRUE,code.wd=code.wd)
com.b=com.read$com.okay
com.read$min.read
dim(com.b)
## loading file ##
com.a=read.table(file=paste("input/",comr.file,sep=""),header=T,sep="\t",row.names=1);com.a=t(com.a)
dim(com.a)
if(!is.na(rm.samplist))
{
source(file=paste(code.wd,"/rm.samp.r",sep=""))
com.a=rm.samp(com.a,rm.samplist)
com.b=rm.samp(com.b,rm.samplist)
}
treat=read.table(file=paste("input/",treat.file,sep=""),header=T,sep=",",row.names=1)
if(gene=="ITS")
{
source(file=paste(code.wd,"/tran.ITSrdp.r",sep=""))
classif.all=tran.ITSrdp(file=paste("input/",classif.file,sep=""),conf=its.conf)
classif=classif.all$taxa
}else{
classif=read.table(file=paste("input/",classif.file,sep=""),header=T,sep="\t",row.names=1)
}
## 1.1 ## basic diversity analysis, alpha, DCA, taxa overall composition
source(file=paste(code.wd,"/egg1.r",sep=""))
com.egg=egg1(comi=com.a,treat=treat,com.raw=com.b,classif=classif,level=5,env=NA,prefix,write.output=TRUE,code.wd=code.wd)
# 2 # generate community file and treatment file for ieg pipeline
# please feel free to contact Daliang Ning (ningdaliang@gmail.com)
# If you use it, you may cite this version as
# Daliang Ning. 2015. Egg. Retrived Jun 1, 2015, from https://github.com/DaliangNing/egg
##### end ####
com.a
inp=read.table(file="input/1.Input.csv",header=T,sep=",",row.names=1,as.is=TRUE)
setwd=("C:/Users/Daliang/Dropbox/ToolDevelop/github/egg")
# install.packages("vegan")
#########################################
## input ##
inp=read.table(file="input/1.Input.csv",header=T,sep=",",row.names=1,as.is=TRUE)
setwd=("C:/Users/Daliang/Dropbox/ToolDevelop/github/egg")
# install.packages("vegan")
#########################################
## input ##
inp=read.table(file="input/1.Input.csv",header=T,sep=",",row.names=1,as.is=TRUE)
source('C:/Users/Daliang/Dropbox/ToolDevelop/github/egg/Rcode/main.r', echo=TRUE)
library(vegan)
inp=read.table(file="input/1.Input.csv",header=T,sep=",",row.names=1,as.is=TRUE)
inp=read.table(file="/input/1.Input.csv",header=T,sep=",",row.names=1,as.is=TRUE)
inp=read.table(file="input/1.Input.csv",header=T,sep=",",row.names=1,as.is=TRUE)
inp=read.table(file="input/1.Input.csv",header=T,sep=",",row.names=1,as.is=TRUE)
load("C:/Users/Daliang/Dropbox/GWMC-analysis/150527-16S-merge/UPARSE/output/GW150530M_16S_UP_c.Rwork.RData")
dim(com.a)
dim(com.b)
code.wd
source(file=paste(code.wd,"/egg1.r",sep=""))
com.egg=egg1(comi=com.a,treat=treat,com.raw=com.b,classif=classif,level=5,env=NA,prefix,write.output=TRUE,code.wd=code.wd)
setwd("C:/Users/Daliang/Dropbox/GWMC-analysis/150527-16S-merge/UPARSE")
source(file=paste(code.wd,"/ieg.upload.r",sep=""))
source(file=paste(code.wd,"/egg1.r",sep=""))
com.egg=egg1(comi=com.a,treat=treat,com.raw=com.b,classif=classif,level=5,env=NA,prefix,write.output=TRUE,code.wd=code.wd)
a=list(x=1,y=2)
a
a[1]
a[[1]]
setwd("C:/Users/Daliang/Dropbox/GWMC-analysis/150523-ITS-merge/UPARSE")
load("C:/Users/Daliang/Dropbox/GWMC-analysis/150523-ITS-merge/UPARSE/output/GW150523M_ITS_UP.Rwork.R.RData")
dim(com.a)
dim(com.b)
source(file=paste(code.wd,"/egg1.r",sep=""))
com.egg=egg1(comi=com.a,treat=treat,com.raw=com.b,classif=classif,level=5,env=NA,prefix,write.output=TRUE,code.wd=code.wd)
source(file=paste(code.wd,"/dissim.r",sep=""))
dissim
dim(comm)
source(file=paste(code.wd,"/ieg.upload.r",sep=""))
ieg.up=ieg.upload(com.a,treat,prefix,category=NA)
source(file=paste(code.wd,"/egg1.r",sep=""))
com.egg=egg1(comi=com.a,treat=treat,com.raw=com.b,classif=classif,level=5,env=NA,prefix,write.output=TRUE,code.wd=code.wd)
treat
ncol(treat)
names(com.egg)
dim(comi)
comi=com.a
comm=comi[,colSums(comi)>0]
samp.name=rownames(comm)
treat1=treat
treat=treat[match(samp.name,rownames(treat)),]
dim(treat)
dim(treat1)
sum(is.na(match(samp.name,rownames(treat))))
rownames(treat1)
sum(is.na(match(samp.name,rownames(treat1))))
samp.name
treat=treat1
treat=treat[match(samp.name,rownames(treat)),]
dim(treat)
treat=treat1
treat=read.table(file=paste("input/",treat.file,sep=""),header=T,sep=",",row.names=1)
treat1=treat
treat=treat[match(samp.name,rownames(treat)),]
dim(treat)
rownames(treat1)
sum(!is.na(match(samp.name,rownames(treat))))
sum(!is.na(match(samp.name,rownames(treat1))))
treat=treat1
treat=treat[match(samp.name,rownames(treat)),]
dim(treat)
length(treat)
treat=treat1
treat=data.frame(treat[match(samp.name,rownames(treat)),])
dim(treat)
names(treat)
treat=read.table(file=paste("input/",treat.file,sep=""),header=T,sep=",",row.names=1)
treat.name=colnames(treat)
treat=data.frame(treat[match(samp.name,rownames(treat)),])
colnames(treat)=treat.name
dim(treat)
names(treat)
load("C:/Users/Daliang/Dropbox/GWMC-analysis/150523-ITS-merge/UPARSE/output/GW150523M_ITS_UP.Rwork.R.RData")
setwd("C:/Users/Daliang/Dropbox/GWMC-analysis/150523-ITS-merge/UPARSE")
source(file=paste(code.wd,"/egg1.r",sep=""))
com.egg=egg1(comi=com.a,treat=treat,com.raw=com.b,classif=classif,level=5,env=NA,prefix,write.output=TRUE,code.wd=code.wd)
comi=com.a
comm=comi[,colSums(comi)>0]
samp.name=rownames(comm)
treat.name=colnames(treat)
treat=data.frame(treat[match(samp.name,rownames(treat)),])
colnames(treat)=treat.name
message("now doing dissimilarity test between treatments. ",date())
source(file=paste(code.wd,"/dissim.r",sep=""))
setwd("C:/Users/Daliang/Dropbox/ToolDevelop/github/egg")
source('C:/Users/Daliang/Dropbox/ToolDevelop/github/egg/Rcode/main.r', echo=TRUE)
source('C:/Users/Daliang/Dropbox/ToolDevelop/github/egg/Rcode/main.r', echo=TRUE)
