a
a[,1,drop=FALSE]
a[,1]
is.data.frame(a[,1,drop=FALSE])
is.data.frame(a[,1])
source('C:/Users/Daliang/Dropbox/ToolDevelop/github/egg/Rcode/cor.alpha.env.r', echo=TRUE)
com=read.table("clipboard",header = T,row.names = 1)
comm=t(com)
dim(comm)
env=read.table("clipboard",header = T,row.names = 1)
dim(env)
env
code.wd="C:/Users/Daliang/Dropbox/ToolDevelop/github/egg/Rcode"
cor.alpha.env(comi=comm,env = env,code.wd=code.wd)
source('C:/Users/Daliang/Dropbox/ToolDevelop/github/egg/Rcode/cor.alpha.env.r', echo=TRUE)
cor.alpha.env(comi=comm,env = env,code.wd=code.wd)
source('C:/Users/Daliang/Dropbox/ToolDevelop/github/egg/Rcode/cor.alpha.env.r', echo=TRUE)
cor.alpha.env(comi=comm,env = env,code.wd=code.wd)
source('C:/Users/Daliang/Dropbox/ToolDevelop/github/egg/Rcode/cor.alpha.env.r', echo=TRUE)
cor.alpha.env(comi=comm,env = env,code.wd=code.wd)
source('C:/Users/Daliang/Dropbox/ToolDevelop/github/egg/Rcode/cor.alpha.env.r', echo=TRUE)
cor.alpha.env(comi=comm,env = env,code.wd=code.wd)
source('C:/Users/Daliang/Dropbox/ToolDevelop/github/egg/Rcode/cor.alpha.env.r', echo=TRUE)
cor.alpha.env(comi=comm,env = env,code.wd=code.wd)
warnings()
a=data.frame(matrix(0,2,2))
b=a
a
b
vegdist(a,b)
library(vegan)
vegdist(a,b)
a
b
a=dist(a)
vegdist(a)
dist(a)
vegdist(a)
vegdist(a,method="E")
vegdist(a,E)
vegdist(a,eu)
vegdist(a,method="eu")
vegdist(a,method="br")
a
b
vegdist(b,method="br")
help("setNames")
help("setnames")
library(data.table)
help("setnames")
a
b
setnames(b,c(1,2))
setnames(b,c("a","b"))
b
c("Factor","beta.index",as.vector(sapply(paste("Mantel",cor.meth,sep = "."), paste, c("r","p"),sep="."))))
c("Factor","beta.index",as.vector(sapply(paste("Mantel",cor.meth,sep = "."), paste, c("r","p"),sep=".")))
cor.meth=c("pearson","kendall","spearman")
c("Factor","beta.index",as.vector(sapply(paste("Mantel",cor.meth,sep = "."), paste, c("r","p"),sep=".")))
source('C:/Users/Daliang/Dropbox/ToolDevelop/github/egg/Rcode/cor.beta.env.r', echo=TRUE)
comm
com=read.table("clipboard",header = T,row.names = 1)
comm=t(com)
dim(comm)
env=read.table("clipboard",header = T,row.names = 1)
dim(env)
env
code.wd="C:/Users/Daliang/Dropbox/ToolDevelop/github/egg/Rcode"
cor.beta.env(comi=comm,env = env,code.wd = code.wd)
comi=comm
cor.meth
library(vegan)
library(data.table)
if(sum(rownames(comi)!=rownames(env))>0)
{
samp.name=intersect(rownames(comi),rownames(env))
comi=comi[match(samp.name,rownames(comi)),]
env=env[match(samp.name,rownames(env)),]
message("Some samples are not match in com and env matrix, so removed.")
}
source(file = paste(code.wd,"/beta.dis.r",sep = ""))
beta.div=beta.dis(comi,binary = "Both",out.format = "dist")
cor.b.e<-function(i,env.list,beta.list,cor.meth)
{
cor.b.b<-function(betai,envi,cor.meth)
{
cor.b.m<-function(meth,betai,envi)
{
envi.dis=dist(envi)
corbm=mantel(betai,envi.dis,method = meth)
res=c(corbm$statistic,corbm$signif)
}
corbb=unlist(lapply(cor.meth, cor.b.m,betai=betai,envi=envi))
corbb
}
envi=env.list[[i]]
envi.name=env.list[i]
corbe=lapply(beta.list, cor.b.b,envi=envi,cor.meth=cor.meth)
res=data.frame(t(matrix(unlist(corbe),nrow=length(corbe[[1]]))))
out=data.frame(Env=rep(envi.name,nrow(res)),Beta=names(beta.list),res)
out
}
env.list=lapply(1:ncol(env), function(i,env){env[,i]}, env=env)
names(env.list)=colnames(env)
res<-lapply(1:ncol(env),cor.b.e,env.list=env.list,beta.list=beta.div,cor.meth=cor.meth)
cor.b.e<-function(i,env.list,beta.list,cor.meth)
{
cor.b.b<-function(betai,envi,cor.meth)
{
cor.b.m<-function(meth,betai,envi)
{
envi.dis=dist(envi)
corbm=mantel(betai,envi.dis,method = meth)
res=c(corbm$statistic,corbm$signif)
}
corbb=unlist(lapply(cor.meth, cor.b.m,betai=betai,envi=envi))
corbb
}
envi=env.list[[i]]
envi.name=env.list[i]
message("Now mantel test between beta distances and ", envi.name,". env i=",i," in ", length(env.list),". ",date())
corbe=lapply(beta.list, cor.b.b,envi=envi,cor.meth=cor.meth)
res=data.frame(t(matrix(unlist(corbe),nrow=length(corbe[[1]]))))
out=data.frame(Env=rep(envi.name,nrow(res)),Beta=names(beta.list),res)
out
}
env.list=lapply(1:ncol(env), function(i,env){env[,i]}, env=env)
names(env.list)=colnames(env)
res<-lapply(1:ncol(env),cor.b.e,env.list=env.list,beta.list=beta.div,cor.meth=cor.meth)
lapply(beta.div,function(x){nrow(as.matrix(x))})
beta.div[[3]]
cor.b.e<-function(i,env.list,beta.list,cor.meth)
{
cor.b.b<-function(betai,envi,cor.meth)
{
cor.b.m<-function(meth,betai,envi)
{
envi.dis=dist(envi)
corbm=mantel(betai,envi.dis,method = meth)
res=c(corbm$statistic,corbm$signif)
}
corbb=unlist(lapply(cor.meth, cor.b.m,betai=betai,envi=envi))
corbb
}
envi=env.list[[i]]
envi.name=names(env.list)[i]
message("Now mantel test between beta distances and ", envi.name,". env i=",i," in ", length(env.list),". ",date())
corbe=lapply(beta.list, cor.b.b,envi=envi,cor.meth=cor.meth)
res=data.frame(t(matrix(unlist(corbe),nrow=length(corbe[[1]]))))
out=data.frame(Env=rep(envi.name,nrow(res)),Beta=names(beta.list),res)
out
}
env.list=lapply(1:ncol(env), function(i,env){env[,i]}, env=env)
names(env.list)=colnames(env)
res<-lapply(1:ncol(env),cor.b.e,env.list=env.list,beta.list=beta.div,cor.meth=cor.meth)
res
res=rbindlist(res)
res.name=c("Factor","beta.index",as.vector(sapply(paste("Mantel",cor.meth,sep = "."), paste, c("r","p"),sep=".")))
setnames(res,res.name)
res
res[,1:4]
res
is.data.frame(res)
res[,1]
dim(res)
res[,1:8]
res[1:30,1:8]
res
colnames(res)
rownames(res)
res[1,1]
res[2,4]
res[[1]][2,4]
View(res)
res<-lapply(1:ncol(env),cor.b.e,env.list=env.list,beta.list=beta.div,cor.meth=cor.meth)
res=rbindlist(res)
res.name=c("Factor","beta.index",as.vector(sapply(paste("Mantel",cor.meth,sep = "."), paste, c("r","p"),sep=".")))
colnames(res)=res.name
res
res[1:3,]
res[1:3,1:4]
res1=data.frame(res)
res1[,1:4]
res<-lapply(1:ncol(env),cor.b.e,env.list=env.list,beta.list=beta.div,cor.meth=cor.meth)
res=data.frame(rbindlist(res))
res.name=c("Factor","beta.index",as.vector(sapply(paste("Mantel",cor.meth,sep = "."), paste, c("r","p"),sep=".")))
setnames(res,res.name)
res
source('C:/Users/Daliang/Dropbox/ToolDevelop/github/egg/Rcode/cor.beta.env.r', echo=TRUE)
comm
env
cor.beta.env(comi=comm,env = env,code.wd = code.wd)
source('C:/Users/Daliang/Dropbox/ToolDevelop/github/egg/Rcode/cor.alpha.env.r', echo=TRUE)
cor.alpha.env(comi=comm,env = env,code.wd=code.wd)
source('C:/Users/Daliang/Dropbox/ToolDevelop/github/egg/Rcode/egg.cor.r', echo=TRUE)
setwd("C:/Users/Daliang/Dropbox/ToolDevelop/github/egg")
cate=read.table("clipboard",header = T,row.names = 1)
cate
egg.cor(comi = comm,category = cate,env = env,prefix = "test.temp",code.wd = code.wd)
source('C:/Users/Daliang/Dropbox/ToolDevelop/github/egg/Rcode/main.r', echo=TRUE)
source('C:/Users/Daliang/Dropbox/ToolDevelop/github/egg/Rcode/main.r', echo=TRUE)
pd.file=inp["pd.file",1]
tree.file=inp["tree.file",1]
nworker=as.numeric(inp["nworker",1])
phylo.yn=inp["phylo.yn",1]
PD.yn=inp["PD.yn",1]
MPD.yn=inp["MPD.yn",1]
NRI.yn=inp["NRI.yn",1]
MNTD.yn=inp["MNTD.yn",1]
NTI.yn=inp["NTI.yn",1]
bMPD.yn=inp["bMPD.yn",1]
bNRI.yn=inp["bNRI.yn",1]
bMNTD.yn=inp["bMNTD.yn",1]
bNTI.yn=inp["bNTI.yn",1]
ab.weight=as.logical(inp["ab.weight",1])
exclude.consp=as.logical(inp["exclude.consp",1])
rand.times=as.numeric(inp["rand.times",1])
env.file=inp["env.file",1]
cor.MPD.env.yn=inp["cor.MPD.env.yn",1]
cor.NRI.env.yn=inp["cor.NRI.env.yn",1]
cor.MNTD.env.yn=inp["cor.MNTD.env.yn",1]
cor.NTI.env.yn=inp["cor.NTI.env.yn",1]
cor.bMPD.env.yn=inp["cor.bMPD.env.yn",1]
cor.bNRI.env.yn=inp["cor.bNRI.env.yn",1]
cor.bMNTD.env.yn=inp["cor.bMNTD.env.yn",1]
cor.bNTI.env.yn=inp["cor.bNTI.env.yn",1]
## loading files ##
library(vegan)
memory.limit(size=memory.G*1024)
com.raw=read.table(file=paste("input/",com.file,sep=""),header=T,sep="\t",row.names=1);com.raw=t(com.raw)
if(grepl("tabular",com.file))
{
rownames(com.raw)=sub("abel.","",rownames(com.raw))
rownames(com.raw)=sub("_",".",rownames(com.raw))
}
dim(com.raw)
if(!is.na(samplist.file))
{
write.csv(data.frame(sample=rownames(com.raw)),file=paste("output/",prefix,".00.oldSampName.csv",sep=""))
samplist=read.table(file=paste("input/",samplist.file,sep=""),header=T,sep=",",row.names=1)
sum(is.na(match(samplist[,1],rownames(com.raw))))
}
## 0.1 ## prepare otu table for resample
if(file.exists(paste("output/",prefix,".00.rawOTU.txt",sep="")))
{
com.b=read.table(file=paste("output/",prefix,".00.rawOTU.txt",sep=""),header=T,sep="\t",row.names = 1)
com.b=t(com.b)
}else{
if(prep.resamp!=0)
{
source(file=paste(code.wd,"/minread.r",sep=""))
com.read=minread(com.raw,samplist,prefix,read.limit=read.limit,write.otu=TRUE,code.wd=code.wd)
com.b=com.read$com.okay
com.read$min.read
}else{
if(!is.na(samplist.file))
{
source(file=paste(code.wd,"/rename.samp.r",sep=""))
com.b=rename.samp(com.raw,samplist)
write.table(cbind(OTU=colnames(com.b),t(com.b)),file=paste("output/",prefix,".00.rawOTU.txt",sep=""),sep="\t",row.names=FALSE,quote=FALSE)
}else{
com.b=com.raw
}
}
}
dim(com.b)
## loading file ##
### resampled otu table
if(file.exists(paste("input/",comr.file,sep="")))
{
com.a=read.table(file=paste("input/",comr.file,sep=""),header=T,sep="\t",row.names=1);com.a=t(com.a)
}else{
if(prep.resamp==0)
{
com.a=com.b
warning("using the raw community table instead of resampled table.")
}else{
com.a=NA
warning("you are preparing or need to prepare resampled table.")
}
}
dim(com.a)
### remove sample list
if(!is.na(rm.samplist))
{
source(file=paste(code.wd,"/rm.samp.r",sep=""))
com.a=rm.samp(com.a,rm.samplist)
com.b=rm.samp(com.b,rm.samplist)
}
### treatment
if(file.exists(paste("input/",treat.file,sep="")))
{
treat=read.table(file=paste("input/",treat.file,sep=""),header=T,sep=",",row.names=1)
}else{
treat=NA
}
dim(treat)
### env
if(file.exists(paste("input/",env.file,sep="")))
{
env=read.table(file=paste("input/",env.file,sep=""),header=T,sep=",",row.names=1)
}else{
env=NA
}
### classification information
if(file.exists(paste("input/",classif.file,sep="")))
{
if(gene=="ITS")
{
source(file=paste(code.wd,"/tran.ITSrdp.r",sep=""))
classif.all=tran.ITSrdp(file=paste("input/",classif.file,sep=""),conf=its.conf)
classif=classif.all$taxa
}else{
classif=read.table(file=paste("input/",classif.file,sep=""),header=T,sep="\t",row.names=1)
}
}else{
classif=NA
}
dim(classif)
### category DCA list
if(file.exists(paste("input/",cateDCA.list,sep="")))
{
cateDCA.g=read.table(file=paste("input/",cateDCA.list,sep=""),header=T,sep=",",row.names=1)
}else{
cateDCA.g=NA
}
#### category sum list
if(file.exists(paste("input/",cateSum.list,sep="")))
{
cateSum.g=read.table(file=paste("input/",cateSum.list,sep=""),header=T,sep=",",row.names=1)
}else{
cateSum.g=NA
}
## 1 ## basic diversity analysis, alpha, DCA, taxa overall composition
source(file=paste(code.wd,"/egg1.r",sep=""))
com.egg=egg1(comi=com.a,treat=treat,com.raw=com.b,classif=classif,level=5,env=NA,prefix,
write.output=TRUE,code.wd=code.wd,statement.yn=statement.yn,alpha.yn=alpha.yn,beta.yn=beta.yn,
DCA.yn=DCA.yn,Dissim.yn=Dissim.yn,taxa.yn=taxa.yn,cateDCA.g=cateDCA.g,cateSum.g=cateSum.g,
cateSum.DCA=cateSum.DCA,cateSum.cateDCA=cateSum.cateDCA)
## 2 ## correlation test
source(file = paste(code.wd,"/egg.cor.r",sep=""))
if(file.exists(paste("input/",cateCor.file,sep="")))
{
cateCor.g=read.table(file=paste("input/",cateCor.file,sep=""),header=T,sep=",",row.names=1)
}else{
cateCor.g=NA
}
cor.egg=egg.cor(comi = comm,category = cateCor.g,env = env,
alpha.env.yn = alpha.env.yn,beta.env.yn = beta.env.yn,cate.env.yn = cate.env.yn,
write.output = TRUE,prefix = prefix,code.wd = code.wd)
## 3 ## generate community file and treatment file for ieg pipeline
if(ieg.yn!=0)
{
source(file=paste(code.wd,"/ieg.upload.r",sep=""))
ieg.up=ieg.upload(com.a,treat,prefix,category=NA)
}
# 3 # Phylogenetic analysis
if(phylo.yn!=0)
{
library(picante)
# loading files
if(file.exists(paste("input/",pd.file,sep="")))
{
pd=read.table(file=paste("input/",pd.file,sep=""),header=T,sep=",",row.names=1)
if(sum(colnames(pd)!=rownames(pd))>0)
{
colnames(pd)=rownames(pd)
message("force the colnames of pd to be the same as rownames")
}
}else{
pd=NA
}
if(file.exists(paste("input/",tree.file,sep="")))
{
tree=read.tree(file=paste("input/",tree.file,sep=""))
}else{
tree=NA
}
source(file=paste(code.wd,"/egg.p.r",sep=""))
phylo.egg=egg.p(comi=com.a,tree=tree,pd=pd,env=env,nworker=nworker,memory.G=memory.G,prefix=prefix,
PD.yn=PD.yn,MPD.yn=MPD.yn,NRI.yn=NRI.yn,MNTD.yn=MNTD.yn,NTI.yn=NTI.yn,
bMPD.yn=bMPD.yn,bNRI.yn=bNRI.yn,bMNTD.yn=bMNTD.yn,bNTI.yn=bNTI.yn,
cor.MPD.env.yn=cor.MPD.env.yn, cor.NRI.env.yn=cor.NRI.env.yn,
cor.MNTD.env.yn=cor.MNTD.env.yn, cor.NTI.env.yn=cor.NTI.env.yn,
cor.bMPD.env.yn=cor.bMPD.env.yn, cor.bNRI.env.yn=cor.bNRI.env.yn,
cor.bMNTD.env.yn=cor.bMNTD.env.yn, cor.bNTI.env.yn=cor.bNTI.env.yn,
ab.weight=ab.weight,exclude.consp=exclude.consp,rand.times=rand.times,code.wd=code.wd)
}
# END # save work space
save.image(file=paste("output/",prefix,".",format(Sys.time(),"%Y%b%d"),".RData",sep = ""))
# please feel free to contact Daliang Ning (ningdaliang@gmail.com)
# If you use it, you may cite this version as
# Daliang Ning. 2015. Egg. Retrived Jun 26, 2015, from https://github.com/DaliangNing/egg
##### end ####
source('C:/Users/Daliang/Dropbox/ToolDevelop/github/egg/Rcode/main.r', echo=TRUE)
env
com.a
comi=com.a
env=env
cor.meth
alpha.div=NA
index=NA
code.wd
library(vegan)
library(data.table)
if(is.null(nrow(comi))&is.null(nrow(alpha.div)))
{
message("Neither com or alpha is available. return NA")
output=NA
}else{
if(is.null(nrow(alpha.div))|sum(rownames(alpha.div)!=rownames(env))>0)
{
source(file=paste(code.wd,"/alpha.r",sep=""))
if(sum(rownames(comi)!=rownames(env))>0)
{
samp.name=intersect(rownames(comi),rownames(env))
comi=comi[match(samp.name,rownames(comi)),]
env=env[match(samp.name,rownames(env)),]
message("Some samples are not match in com and env matrix, so removed.")
}
alpha.div=alpha(comi)
}
}
if(is.na(index)[1]){index=c(1:5,7)}
comi
env
index
alpha.list=lapply(index, function(i,xxx){xxx[,i]},xxx=alpha.div)
names(alpha.list)=colnames(alpha.div)[index]
env.list=lapply(1:ncol(env), function(i,env){env[,i]}, env=env)
names(env.list)=colnames(env)
alpha.list
env.list
cor.a.env<-function(i,env.list,alpha.list,cor.meth)
{
cor.a.a<-function(alphai,envi,cor.meth)
{
cor.a.m<-function(meth,xx,yy)
{
cor11<-cor.test(xx,yy,method=meth)
out=c(cor11$estimate[[1]],cor11$p.value)
out
}
coraa=unlist(lapply(cor.meth,cor.a.m,xx=alphai,yy=envi))
coraa
}
envi=env.list[[i]]
envi.name=names(env.list)[i]
corae<-lapply(alpha.list,cor.a.a,envi=envi,cor.meth=cor.meth)
res=data.frame(t(matrix(unlist(corae),nrow=length(corae[[1]]))))
out=data.frame(Env=rep(envi.name,nrow(res)),Alpha=names(alpha.list),res)
out
}
res<-lapply(1:ncol(env),cor.a.env,env.list=env.list,alpha.list=alpha.list,cor.meth=cor.meth)
res=data.frame(rbindlist(res))
colnames(res)=c("Factor","Alpha.Index",as.vector(sapply(cor.meth,paste,c("r","p"),sep=".")))
res
comi=com.a
if(file.exists(paste("input/",env.file,sep="")))
{
env=read.table(file=paste("input/",env.file,sep=""),header=T,sep=",",row.names=1)
}else{
env=NA
}
env
comi
library(vegan)
library(data.table)
# match names
if(!is.null(nrow(category)))
{
if(sum(colnames(comi)!=rownames(category))>0)
{
sp.name=intersect(colnames(comi),rownames(category))
comi=comi[,match(sp.name,colnames(comi))]
category=category[match(sp.name,rownames(category)),]
}
}
if(sum(rownames(comi)!=rownames(env))>0)
{
samp.name=intersect(rownames(comi),rownames(env))
comi=comi[match(samp.name,rownames(comi)),]
env=env[match(samp.name,rownames(env)),]
}
category=cateCor.g
library(vegan)
library(data.table)
# match names
if(!is.null(nrow(category)))
{
if(sum(colnames(comi)!=rownames(category))>0)
{
sp.name=intersect(colnames(comi),rownames(category))
comi=comi[,match(sp.name,colnames(comi))]
category=category[match(sp.name,rownames(category)),]
}
}
if(sum(rownames(comi)!=rownames(env))>0)
{
samp.name=intersect(rownames(comi),rownames(env))
comi=comi[match(samp.name,rownames(comi)),]
env=env[match(samp.name,rownames(env)),]
}
comi
env
source('C:/Users/Daliang/Dropbox/ToolDevelop/github/egg/Rcode/main.r', echo=TRUE)
comm
help(rm)
rm(comm)
comm
source('C:/Users/Daliang/Dropbox/ToolDevelop/github/egg/Rcode/main.r', echo=TRUE)
warnings()
