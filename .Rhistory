cumsum(bv)
b
rownames(b)=101:107
b
bv=b[,1,drop=FALSE]
cumsum(bv)
bv
bv2=bv[bv>4]
bv2
bv2=bv[bv>4,drop=false]
bv2=bv[bv>4,drop=FALSE]
bv2=bv[bv[,1]>4,,drop=false]
bv2=bv[bv[,1]>4,,drop=FALSE]
bv2
bv[bv>4,,drop=FALSE]
sum(b)
sample(1:30,3)
b
bv
bv2
cumsum(bv2)
a
b
c
x=1:10
y=c(3,4,10)
hist(x,breaks=y)
hist(x,breaks=c(0,y))
h=hist(x,breaks=c(0,y))
hist
h=hist(x,breaks=c(0,y),plot = FALSE)
names(h)
h$counts
x
y
x2=sample(x,5)
h=hist(x2,breaks=c(0,y),plot = FALSE)
h
h$counts
x2
y
hist
help(hist)
b
bv
bv2
x2
h=hist(x2,breaks=c(0,bv2),plot = FALSE)
as.vector(bv2)
as.vector(cumsum(bv2))
as.matrix(cumsum(bv2))
as.vector(as.matrix(cumsum(bv2)))
h$counts
y
b
b[3,1]=0
b
comc=b
i=1
reads.limit=10
comv=comc[,i]
comv
id=(comv>0)
id
comv.cum=cumsum(comv[id])
comv.cum
seq.num=sum(comv)
seq.num
resamp=sample(1:seq.num,reads.limit)
resamp
h=hist(resamp,breaks=c(0,comv.cum),plot = FALSE)
comv[id]=h$counts
comv
comc[,i]
comv=comc[,i]
id=(comv>0)
comv.cum=cumsum(comv[id])
seq.num=sum(comv)
resamp=sample(1:seq.num,reads.limit)
h=hist(resamp,breaks=c(0,comv.cum),plot = FALSE)
comv[id]=h$counts
comv
comv=comc[,i]
id=(comv>0)
comv.cum=cumsum(comv[id])
seq.num=sum(comv)
resamp=sample(1:seq.num,reads.limit)
h=hist(resamp,breaks=c(0,comv.cum),plot = FALSE)
comv[id]=h$counts
comv
comv=comc[,i]
id=(comv>0)
comv.cum=cumsum(comv[id])
seq.num=sum(comv)
resamp=sample(1:seq.num,reads.limit)
h=hist(resamp,breaks=c(0,comv.cum),plot = FALSE)
comv[id]=h$counts
comv
resamp<-function(i,comc,reads.limit)
{
comv=comc[,i]
id=(comv>0)
comv.cum=cumsum(comv[id])
seq.num=sum(comv)
resamp=sample(1:seq.num,reads.limit)
h=hist(resamp,breaks=c(0,comv.cum),plot = FALSE)
comv[id]=h$counts
comv
}
resamp(1,b,10)
sapply(1:ncol(b),b,10)
sapply(1:ncol(b),resamp,b,10)
sapply(1:ncol(b),resamp,b,10)
sapply(1:ncol(b),resamp,b,10)
sapply(1:ncol(b),resamp,b,10)
sapply(1:ncol(b),resamp,b,10)
sapply(1:ncol(b),resamp,b,10)
a
b
bx=b[,1:3]
bx
a
a[,2:4]=bx
a
a
a=data.frame(matrix(2,7,4))
a
b
bx
a
a[,2:4]=bx
a
help("replicate")
replicate(2,sapply(1:ncol(b),resamp,b,10))
xx=replicate(2,sapply(1:ncol(b),resamp,b,10))
xx
apply(xx,c(1,2),mean)
apply(xx,3,mean)
help(se)
help(sd)
?? quantile
help("quantile")
a=
a
c
quantile(c,probs=0.95)
apply(xx,c(1,2),quantile,probs=0.95)
apply(xx,c(1,2),quantile,probs=0.05)
apply(xx,c(1,2),quantile,probs=c(0.05,0.95)
)
a
rep(a,3)
help(rep)
a
replicate(2,a)
array(a,dim=c(7,4,2))
a
a=as.matrix(a)
array(a,dim(7,4,2))
array(a,dim=c(7,4,2))
a
aa=array(a,dim=c(7,4,2))
aa
aa[,,2]
aa[,1:3,]
bb=array(as.matrix(b),dim=c(7,4,2))
bb
aa
bbx=bb[,1:2,]
bbx
aa[,3:4,]=bbx
aa
a
help(parLapply)
library(parallel)
help(parLapply)
source('C:/Users/Daliang/Dropbox/ToolDevelop/github/egg/Rcode/com.resamp.r', echo=TRUE)
b
com.resamp(comi = b,reads.limit = 20,nworker = 1)
source('C:/Users/Daliang/Dropbox/ToolDevelop/github/egg/Rcode/com.resamp.r', echo=TRUE)
com.resamp(comi = b,reads.limit = 20,nworker = 1)
b
colSums(b)
comi=b
reads.limit=20
nworker=1
comt=t(comi)
old.reads=colSums(comt)
id.yes=(old.reads>reads.limit)
id.yes
sum(id.yes)
source('C:/Users/Daliang/Dropbox/ToolDevelop/github/egg/Rcode/com.resamp.r', echo=TRUE)
com.resamp(comi = b,reads.limit = 20,nworker = 1)
com.resamp(comi = t(b),reads.limit = 20,nworker = 1)
com.resamp(comi = t(b),reads.limit = 20,nworker = 1)
com.resamp(comi = t(b),reads.limit = 20,nworker = 1)
com.resamp(comi = t(b),reads.limit = 20,nworker = 1)
com.resamp(comi = t(b),reads.limit = 20,nworker = 2)
source('C:/Users/Daliang/Dropbox/ToolDevelop/github/egg/Rcode/com.resamp.r', echo=TRUE)
gc()
source('C:/Users/Daliang/Dropbox/ToolDevelop/github/egg/Rcode/com.resamp.r', echo=TRUE)
com.resamp(comi = t(b),reads.limit = 20,nworker = 2)
source('C:/Users/Daliang/Dropbox/ToolDevelop/github/egg/Rcode/com.resamp.r', echo=TRUE)
com.resamp(comi = t(b),reads.limit = 20,nworker = 2)
source('C:/Users/Daliang/Dropbox/ToolDevelop/github/egg/Rcode/com.resamp.r', echo=TRUE)
com.resamp(comi = t(b),reads.limit = 20,nworker = 2)
com.resamp(comi = t(b),reads.limit = 20,nworker = 1)
gc()
com.resamp(comi = t(b),reads.limit = 20,nworker = 2)
a
replicate(1,a)
replicate(3,com.resamp(comi = t(b),reads.limit = 20,nworker = 1))
library(vegan)
r=replicate(3,com.resamp(comi = t(b),reads.limit = 20,nworker = 1))
r
apply(r,c(1,2),vegdist)
r
apply(r,c(1,2),vegdist)
r=as.array(r)
r
apply(r,c(1,2),vegdist)
r[,,1]
vegdist(r[,,1])
apply(r,c(1,2),function(x){as.matrix(vegdist(x))})
as.matrix(vegdist(r[,,1]))
r
a
aa
apply(aa,c(1,2),vegdist)
apply(aa,3,vegdist)
apply(aa,3,function(x){as.matrix(vegdist(x))})
apply(aa,3,vegdist)
dim(aa)
lapply(aa,vegdist)
aaa=list(a,a,a)
aaa
lapply(aaa,vegdist)
sample(c("a","b","c","d"),2)
a
b
a.dis=vegdist(a)
b.dis=vegdist(b)
a.dis
b.dis
mantel(a.dis,b.dis)
mantel(a.dis,b.dis)$statistic
help(sapply)
xx
c
c[2]=4
c==4
c==4[1]
which(4,c)
help(which)
which(c==4)
match(4,c)
c
4 % in % c
4 %in% c
c=1:10
c[4:6]=10
c
match(10,c)
a
source('C:/Users/Daliang/Dropbox/ToolDevelop/github/egg/Rcode/com.simp.r', echo=TRUE)
a
b
code.wd
code.wd="C:/Users/Daliang/Dropbox/ToolDevelop/github/egg/Rcode"
nworker
source('C:/Users/Daliang/Dropbox/ToolDevelop/github/egg/Rcode/com.simp.r', echo=TRUE)
com.simp(comi = t(b),new.limit = 20)
code.wd
com.simp(comi = t(b),new.limit = 20,code.wd=code.wd)
source('C:/Users/Daliang/Dropbox/ToolDevelop/github/egg/Rcode/com.simp.r', echo=TRUE)
com.simp(comi = t(b),new.limit = 20,code.wd=code.wd)
com.simp(comi = t(b),new.limit = 10,code.wd=code.wd)
com.simp(comi = t(b),new.limit = 20,code.wd=code.wd)
com.simp(comi = t(b),new.limit = 20,resamp.meth = "taxa",code.wd=code.wd)
com.simp(comi = t(b),new.limit = 5,resamp.meth = "taxa",code.wd=code.wd)
com.simp(comi = t(b),new.limit = 5,resamp.meth = "taxa",out = "mean",code.wd=code.wd)
source('C:/Users/Daliang/Dropbox/ToolDevelop/github/egg/Rcode/com.simp.r', echo=TRUE)
com.simp(comi = t(b),new.limit = 5,resamp.meth = "taxa",out = "mean",code.wd=code.wd)
com.simp(comi = t(b),new.limit = 5,resamp.meth = "taxa",check.cor = FALSE,out = "mean",code.wd=code.wd)
com.simp(comi = t(b),new.limit = 5,resamp.meth = "taxa",out = "mean",code.wd=code.wd)
com.simp(comi = t(b),new.limit = 5,resamp.meth = "taxa",out = "mean",code.wd=code.wd)
com.simp(comi = t(b),new.limit = 5,resamp.meth = "taxa",out = "mean",code.wd=code.wd)
com.simp(comi = t(b),new.limit = 5,resamp.meth = "taxa",code.wd=code.wd)
a
b=list(a,a)
b
b
b[3:4]=list(a,a)
b
ceiling(1.2)
1:2:4
0:2
0:0
par.time=3
list.limit=100
(0:(par.time-1))*list.limit+1
case.num=205
par.time=ceiling(case.num/list.limit)
case.num.i=matrix(nrow = par.time,ncol = 2)
case.num.i[,1]=((0:(par.time-1))*list.limit+1)
case.num.i[,2]=(case.num.i[,1]+list.limit-1)
case.num.i[par.time,2]=case.num
ccase.num.i
case.num.i
help("makeCluster")
com=read.table("clipboard",header = T,row.names = 1)
comm=t(com)
dim(comm)
env=read.table("clipboard",header = T,row.names = 1)
dim(env)
env
code.wd
source('C:/Users/Daliang/Dropbox/ToolDevelop/github/egg/Rcode/cca.test.p.r', echo=TRUE)
cca.test.p(com.test = comm,env = env,code.wd = code.wd)
cca.test.p(com.test = comm,env = env,list.limit = 4,code.wd = code.wd)
source('C:/Users/Daliang/Dropbox/ToolDevelop/github/egg/Rcode/cca.test.p.r', echo=TRUE)
cca.test.p(com.test = comm,env = env,list.limit = 4,code.wd = code.wd)
cat ("Press [enter] to continue")
line <- readline()
i=1
cat ("Press [enter] to continue")
line <- readline()
1
i=1
readkey<-function()
{
cat ("Press [enter] to continue")
line <- readline()
}
readkey()
i=1
readkey<-function()
{
cat ("Press [enter] to continue")
line <- readline()
}
readkey()
help(readline)
fun <- function() {
ANSWER <- readline("Are you a satisfied R user? ")
## a better version would check the answer less cursorily, and
## perhaps re-prompt
if (substr(ANSWER, 1, 1) == "n")
cat("This is impossible.  YOU LIED!\n")
else
cat("I knew it.\n")
}
if(interactive()) fun()
if(interactive()) fun()
if(interactive()) fun()
i=2
if(interactive()) fun()
i=2
pause = function()
{
if (interactive()) {
invisible(readline(prompt = "Press <Enter> to continue..."))
}
else {
cat("Press <Enter> to continue...")
invisible(readLines(file("stdin"), 1))
}
}
pause()
i=1
i=2
pause = function()
{
if (interactive()) {
invisible(readline(prompt = "Press <Enter> to continue..."))
}
else {
cat("Press <Enter> to continue...")
invisible(readLines(file("stdin"), 1))
}
}
pause()
testiii=function(i)
{
pause = function()
{
if (interactive()) {
invisible(readline(prompt = "Press <Enter> to continue..."))
}
else {
cat("Press <Enter> to continue...")
invisible(readLines(file("stdin"), 1))
}
}
pause()
i+1
}
i=1
j=testiii(i)
plot(1:5)
readline("Press <return to continue")
help("Sys.sleep")
help("interactive")
interactive()
readline()
readline()
help("scan")
scan()
scan()
i=1
scan(n=1)
i=1
break
i=2
wd="C:/Users/Daliang/Dropbox/ToolDevelop/github/cut"
setwd(wd)
i=1
save(i,file="test.RData")
！2
！FALSE
is.numeric(FALSE)
is.numeric(1:10)
source('C:/Users/Daliang/Dropbox/ToolDevelop/github/cut/cca.test.CZ.N.r', echo=TRUE)
####### you do not need to change anything below unless you mean it ###########################
# Step 2# match env and OTU sample names #
setwd(wd)
library(vegan)
com=read.table(file = paste("input/",com.file,sep = ""),header = T,sep = "\t",row.names = 1)
comm=t(com)
dim(comm)
env=read.table(file = paste("input/",env.file,sep = ""),header = T,sep = ",",row.names = 1)
dim(env)
if(sum(rownames(comm)!=rownames(env))>0)
{
samp.name=intersect(rownames(comm),rownames(env))
comm=coms[match(samp.name,rownames(comm)),]
env=env[match(samp.name,rownames(env)),]
message("some sample names are not the same between community matrix and env. removed")
}
# Step 3 # resample community matrix to get a simplified matrix # CCA test using simplified community matrix
if(cca.test.yn)
{
source(file = paste(code.wd,"/com.simp.r",sep = ""))
coms=com.simp(comi = comm,new.limit = new.limit,resamp.meth = resample.method, check.cor = TRUE,times = resample.times,out = "max.r",nworker = nworker,code.wd = code.wd)
dim(coms)
write.csv(t(coms),file = paste("output/",prefix,".com.simple.csv",sep = ""))
source(file = paste(code.wd,"/cca.test.p.r",sep = ""))
cca.test=cca.test.p(com.test = coms,env = env,summ = FALSE,nworker = nworker,memory.G = memory.Gb,list.limit = list.limit,code.wd = code.wd)
write.csv(cca.test,file = paste("output/",prefix,".cca.simple.test.csv",sep = ""))
}
# Step 4 # CCA top cases you picked up #
if(cca.topcases.yn)
{
if(!file.exists(paste("input/",top.case.file,sep = "")))
{
message("you have not generate any file indicating the top cases.")
}else{
topcase=read.table(file = paste("input/",top.case.file,sep = ""),header = T,sep = ",",row.names = 1)
source(file = paste(code.wd,"/cca.test.p.r",sep = ""))
cca.all=cca.test.p(com.test = comm,env = env,cases = topcase,summ = TRUE,nworker = nworker,memory.G = memory.Gb,list.limit = list.limit,code.wd = code.wd)
topcases=TRUE
write.csv(cca.all$index,file = paste("output/",prefix,".cca.topcases.index.csv",sep = ""))
save(cca.all,file = paste("output/",prefix,".cca.topcases.RData",sep = ""))
}
}
if(is.numeric(cca.top1.case))
{
if(!topcases)
{
if(!file.exists(paste("output/",prefix,".cca.topcases.RData",sep = "")))
{
message("you have not finish CCA for top cases using full community matrix.")
}else{
load(file = paste("output/",prefix,".cca.topcases.RData",sep = ""))
}
}
for(i in 1:length(cca.top1.case))
{
write.csv(cca.all$detail[[cca.top1.case[i]]]$sp,file = paste("output/",prefix,".cca.topcase",cca.top1.case[i],".sp.csv",sep = ""))
write.csv(cca.all$detail[[cca.top1.case[i]]]$st,file = paste("output/",prefix,".cca.topcase",cca.top1.case[i],".site.csv",sep = ""))
write.csv(cca.all$detail[[cca.top1.case[i]]]$en,file = paste("output/",prefix,".cca.topcase",cca.top1.case[i],".env.csv",sep = ""))
write.csv(cca.all$detail[[cca.top1.case[i]]]$pr,file = paste("output/",prefix,".cca.topcase",cca.top1.case[i],".prop.csv",sep = ""))
}
}
if(cca.one.yn)
{
env.num=ncol(env)
case1=matrix(0,nrow=env.num,ncol=env.num)
diag(case1)=1
case1=data.frame(case1)
rownames(case1)=1:env.num
colnames(case1)=colnames(env)
source(file = paste(code.wd,"/cca.test.p.r",sep = ""))
cca.one=cca.test.p(com.test = comm,env = env,cases = case1,summ = FALSE,nworker = nworker,memory.G = memory.Gb,list.limit = list.limit,code.wd = code.wd)
write.csv(cca.one,file = paste("output/",prefix,"cca.eachEnv.csv",sep = ""))
}
source('C:/Users/Daliang/Dropbox/ToolDevelop/github/cut/cca.test.CZ.N.r', echo=TRUE)
source('C:/Users/Daliang/Dropbox/ToolDevelop/github/cut/cca.test.CZ.N.r', echo=TRUE)
source('C:/Users/Daliang/Dropbox/ToolDevelop/github/cut/cca.test.CZ.N.r', echo=TRUE)
source('C:/Users/Daliang/Dropbox/ToolDevelop/github/egg/Rcode/main.cca.r', echo=TRUE)
source('C:/Users/Daliang/Dropbox/ToolDevelop/github/egg/Rcode/main.cca.r', echo=TRUE)
source('C:/Users/Daliang/Dropbox/ToolDevelop/github/egg/Rcode/main.cca.r', echo=TRUE)
source('C:/Users/Daliang/Dropbox/ToolDevelop/github/cut/CCAtest/Rcode/main.cca.r', echo=TRUE)
source('C:/Users/Daliang/Dropbox/ToolDevelop/github/cut/CCAtest/Rcode/main.cca.r', echo=TRUE)
source('C:/Users/Daliang/Dropbox/ToolDevelop/github/cut/CCAtest/Rcode/main.cca.r', echo=TRUE)
source('C:/Users/Daliang/Dropbox/ToolDevelop/github/cut/CCAtest/Rcode/main.cca.r', echo=TRUE)
source('C:/Users/Daliang/Dropbox/ToolDevelop/github/cut/CCAtest/Rcode/main.cca.r', echo=TRUE)
source('C:/Users/Daliang/Dropbox/ToolDevelop/github/cut/CCAtest/Rcode/main.cca.r', echo=TRUE)
source('C:/Users/Daliang/Dropbox/ToolDevelop/github/cut/CCAtest/Rcode/main.cca.r', echo=TRUE)
source('C:/Users/Daliang/Dropbox/ToolDevelop/github/egg/Rcode/main.cca.r', echo=TRUE)
source('C:/Users/Daliang/Dropbox/ToolDevelop/github/egg/Rcode/main.cca.r', echo=TRUE)
source('C:/Users/Daliang/Dropbox/ToolDevelop/github/egg/Rcode/main.cca.r', echo=TRUE)
