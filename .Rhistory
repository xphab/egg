code.wd="C:/Users/Daliang/Dropbox/ToolDevelop/github/egg/Rcode" # the directory you save the Rcode
prefix="GW150530M_16S_UP_c" # project name
read.limit=27000 # min reads per sample
gene="16S" #ITS or 16S
its.conf=0.8 # ITS classification confidence threshold
memory.G=30 # memory limitation
# check following file names if you used other names.
com.file="otu_table.txt" # file name of otu table before resample
treat.file="treat.csv" # file name of treatment information
samplist.file="samplist.csv" # file for sample name correction
comr.file="otu_resampled.txt" # file name of otu table after resample
classif.file="classifier" # classification file
rm.samplist="remove.samp.csv" # samples that need be removed
## loading files ##
library(vegan)
memory.limit(size=memory.G*1024)
setwd(wd)
com.raw=read.table(file=paste("input/",com.file,sep=""),header=T,sep="\t",row.names=1);com.raw=t(com.raw)
com.file="otu_table.tabular" # file name of otu table before resample
com.raw=read.table(file=paste("input/",com.file,sep=""),header=T,sep="\t",row.names=1);com.raw=t(com.raw)
if(grepl("tabular",com.file))
{
rownames(com.raw)=sub("abel.","",rownames(com.raw))
rownames(com.raw)=sub("_",".",rownames(com.raw))
}
dim(com.raw)
write.csv(data.frame(sample=rownames(com.raw)),file=paste("output/",prefix,".00.oldSampName.csv",sep=""))
samplist=read.table(file=paste("input/",samplist.file,sep=""),header=T,sep=",",row.names=1)
sum(is.na(match(samplist[,1],rownames(com.raw))))
## 0.1 ## prepare otu table for resample
source(file=paste(code.wd,"/minread.r",sep=""))
source(file=paste(code.wd,"/rename.samp.r",sep=""))
com.read=minread(com.raw,samplist,prefix,read.limit=read.limit,write.otu=TRUE,code.wd=code.wd)
com.b=com.read$com.okay
com.read$min.read
dim(com.b)
## loading file ##
com.a=read.table(file=paste("input/",comr.file,sep=""),header=T,sep="\t",row.names=1);com.a=t(com.a)
dim(com.a)
com.a1=com.a
com.b1=com.b
if(!is.na(rm.samplist))
{
source(file=paste(code.wd,"/rm.samp.r",sep=""))
com.a=rm.samp(com.a,rm.samplist)
com.b=rm.samp(com.b,rm.samplist)
}
dim(com.b)
dim(com.a)
com.a=com.a1
com.b=com.b1
if(!is.na(rm.samplist))
{
source(file=paste(code.wd,"/rm.samp.r",sep=""))
com.a=rm.samp(com.a,rm.samplist)
com.b=rm.samp(com.b,rm.samplist)
}
dim(com.b)
rm.samplist1=read.table(file=paste("input/",rm.samplist,sep=""),header=T,sep=",",row.names=1)
rm.samplist1
comi=com.a
jd=match(rownames(comi),rm.samplist1)
sum(is.na(jd))
sum(!is.na(jd))
sum(rownames(comi)=="USOK01A")
is.data.frame(rm.samplist1)
rm.samplist1[1]
rm.samplist1[1,]
rm.samplist1=read.table(file=paste("input/",rm.samplist,sep=""),header=T,sep=",",row.names=1,stringsAsFactors=FALSE)
jd=match(rownames(comi),rm.samplist1)
sum(!is.na(jd))
rm.samplist1[1,]
rm.samplist1[,1]
jd=match(rownames(comi),rm.samplist1[,1])
sum(!is.na(jd))
length(rm.samplist1)
length(rm.samplist1[,1])
com.a=com.a1
com.b=com.b1
if(!is.na(rm.samplist))
{
source(file=paste(code.wd,"/rm.samp.r",sep=""))
com.a=rm.samp(com.a,rm.samplist)
com.b=rm.samp(com.b,rm.samplist)
}
dim(com.a)
dim(com.b)
treat=read.table(file=paste("input/",treat.file,sep=""),header=T,sep=",",row.names=1)
treat=read.table(file=paste("input/",treat.file,sep=""),header=T,sep=",",row.names=1)
if(gene=="ITS")
{
source(file=paste(code.wd,"/tran.ITSrdp.r",sep=""))
classif.all=tran.ITSrdp(file=paste("input/",classif.file,".txt",sep=""),conf=its.conf)
classif=classif.all$taxa
}else{
classif=read.table(file=paste("input/",classif.file,".txt",sep=""),header=T,sep="\t",row.names=1)
}
classif[1:3,]
dim(classif)
## 1.1 ## basic diversity analysis, alpha, DCA, taxa overall composition
source(file=paste(code.wd,"/egg1.r",sep=""))
com.egg=egg1(comi=com.a,treat=treat,com.raw=com.b,classif=classif,level=5,env=NA,prefix,write.output=TRUE,code.wd=code.wd)
warnings()
save.image("C:/Users/Daliang/Dropbox/GWMC-analysis/150527-16S-merge/UPARSE/output/GW150530M_16S_UP_c.Rwork.RData")
wd="C:/Users/Daliang/Dropbox/ToolDevelop/github/egg" # work directory name
code.wd="C:/Users/Daliang/Dropbox/ToolDevelop/github/egg/Rcode" # the directory you save the Rcode
prefix="try" # project name
read.limit=100 # min reads per sample
gene="16S" #ITS or 16S
its.conf=0.8 # ITS classification confidence threshold
memory.G=30 # memory limitation
# check following file names if you used other names.
com.file="otu_table.txt" # file name of otu table before resample
treat.file="treat.csv" # file name of treatment information
samplist.file="samplist.csv" # file for sample name correction
comr.file="otu_resampled.txt" # file name of otu table after resample
classif.file="classifier" # classification file
rm.samplist=NA # samples that need be removed. name as "remove.samp.csv"
## loading files ##
library(vegan)
memory.limit(size=memory.G*1024)
setwd(wd)
com.raw=read.table(file=paste("input/",com.file,sep=""),header=T,sep="\t",row.names=1);com.raw=t(com.raw)
if(grepl("tabular",com.file))
{
rownames(com.raw)=sub("abel.","",rownames(com.raw))
rownames(com.raw)=sub("_",".",rownames(com.raw))
}
dim(com.raw)
write.csv(data.frame(sample=rownames(com.raw)),file=paste("output/",prefix,".00.oldSampName.csv",sep=""))
samplist=read.table(file=paste("input/",samplist.file,sep=""),header=T,sep=",",row.names=1)
sum(is.na(match(samplist[,1],rownames(com.raw))))
## 0.1 ## prepare otu table for resample
source(file=paste(code.wd,"/minread.r",sep=""))
source(file=paste(code.wd,"/rename.samp.r",sep=""))
com.read=minread(com.raw,samplist,prefix,read.limit=read.limit,write.otu=TRUE,code.wd=code.wd)
com.b=com.read$com.okay
com.read$min.read
dim(com.b)
## loading file ##
com.a=read.table(file=paste("input/",comr.file,sep=""),header=T,sep="\t",row.names=1);com.a=t(com.a)
dim(com.a)
if(!is.na(rm.samplist))
{
source(file=paste(code.wd,"/rm.samp.r",sep=""))
com.a=rm.samp(com.a,rm.samplist)
com.b=rm.samp(com.b,rm.samplist)
}
treat=read.table(file=paste("input/",treat.file,sep=""),header=T,sep=",",row.names=1)
if(gene=="ITS")
{
source(file=paste(code.wd,"/tran.ITSrdp.r",sep=""))
classif.all=tran.ITSrdp(file=paste("input/",classif.file,".txt",sep=""),conf=its.conf)
classif=classif.all$taxa
}else{
classif=read.table(file=paste("input/",classif.file,".txt",sep=""),header=T,sep="\t",row.names=1)
}
gene="ITS" #ITS or 16S
if(gene=="ITS")
{
source(file=paste(code.wd,"/tran.ITSrdp.r",sep=""))
classif.all=tran.ITSrdp(file=paste("input/",classif.file,".txt",sep=""),conf=its.conf)
classif=classif.all$taxa
}else{
classif=read.table(file=paste("input/",classif.file,".txt",sep=""),header=T,sep="\t",row.names=1)
}
if(gene=="ITS")
{
source(file=paste(code.wd,"/tran.ITSrdp.r",sep=""))
classif.all=tran.ITSrdp(file=paste("input/",classif.file,".txt",sep=""),conf=its.conf)
classif=classif.all$taxa
}else{
classif=read.table(file=paste("input/",classif.file,".txt",sep=""),header=T,sep="\t",row.names=1)
}
if(gene=="ITS")
{
source(file=paste(code.wd,"/tran.ITSrdp.r",sep=""))
classif.all=tran.ITSrdp(file=paste("input/",classif.file,".txt",sep=""),conf=its.conf)
classif=classif.all$taxa
}else{
classif=read.table(file=paste("input/",classif.file,".txt",sep=""),header=T,sep="\t",row.names=1)
}
Classif
classif
its.conf=0.1 # ITS classification confidence threshold
if(gene=="ITS")
{
source(file=paste(code.wd,"/tran.ITSrdp.r",sep=""))
classif.all=tran.ITSrdp(file=paste("input/",classif.file,".txt",sep=""),conf=its.conf)
classif=classif.all$taxa
}else{
classif=read.table(file=paste("input/",classif.file,".txt",sep=""),header=T,sep="\t",row.names=1)
}
classif
source(file=paste(code.wd,"/egg1.r",sep=""))
com.egg=egg1(comi=com.a,treat=treat,com.raw=com.b,classif=classif,level=5,env=NA,prefix,write.output=TRUE,code.wd=code.wd)
com.a
com.b
com.raw
comi=com.a
source(file=paste(code.wd,"/per.taxa.r",sep=""))
abun.all=colSums(comi)
abun.all
taxa.p=per.taxa(classif,abun=abun.all,level=level)
level=4
taxa.p=per.taxa(classif,abun=abun.all,level=level)
dim(taxa.p)
samp.t.ab=taxa.p[,1]
samp.t.p=taxa.p[,2]
samp.t.ab
taxa.p
classif
abun.all
taxa.p=per.taxa(classif,abun=abun.all,level=level)
taxa.p
if(is.na(sum(abun)))
{
res=data.frame(Freq=-1,percent=-1)
classif[,i]=paste(classif[,i-1],classif[,i],sep=".")
res=data.frame(Abun=-1,Percent=-1)
res
abun=data.frame(abun)
abun=abun.all
abun=data.frame(abun)
abun
samp.name=rownames(abun)
classif=classif[match(samp.name,rownames(classif)),]
classif
if(gene=="ITS")
{
source(file=paste(code.wd,"/tran.ITSrdp.r",sep=""))
classif.all=tran.ITSrdp(file=paste("input/",classif.file,".txt",sep=""),conf=its.conf)
classif=classif.all$taxa
}else{
classif=read.table(file=paste("input/",classif.file,".txt",sep=""),header=T,sep="\t",row.names=1)
}
classif
source(file=paste(code.wd,"/per.taxa.r",sep=""))
abun.all=colSums(comi)
taxa.p=per.taxa(classif,abun=abun.all,level=level)
samp.t.ab=taxa.p[,1]
samp.t.p=taxa.p[,2]
taxa.p
samp.t
samp.t.ab
rownames(taxa.p)
c(a,b)=1:2
comi
source(file=paste(code.wd,"/per.taxa.r",sep=""))
sp.name=colnames(comi)
classif=classif[match(sp.name,rownames(classif)),]
abun.all=colSums(comi)
taxa.p=per.taxa(classif,abun=abun.all,level=level)
st.ab=data.frame(matrix(,nrow=nrow(taxa.p),ncol=(nrow(comi)+1)))
rownames(st.ab)=rownames(taxa.p)
colnames(st.ab)=c("All",rownames(comi))
st.p=st.ab
st.ab[,1]=taxa.p[,1]
st.p[,1]=taxa.p[,2]
for(i in 1:nrow(comi))
{
taxa.p=per.taxa(classif,abun=comi[i,],level=level)
st.ab[,(i+1)]=taxa.p[,1]
st.p[,(i+1)]=taxa.p[,2]
}
res=cbind(st.ab,st.p)
res
res[1:5,]
View(res)
res=list(abun=st.ab,percent=st.p)
res
res$persent[1:5,]
res$percent[1:5,]
res$abun[1:5,]
source(file=paste(code.wd,"/samp.taxa.r",sep=""))
comm=comi[,colSums(comi)>0]
source(file=paste(code.wd,"/samp.taxa.r",sep=""))
taxa.samp=samp.taxa(comm,classif,level=level,code.wd)
write.output
write.output=TRUE
taxa.samp
length(taxa.samp)
diim(taxa.samp[[1]])
dim(taxa.samp[[1]])
dim(taxa.samp[[2]])
## input ##
# install.packages("vegan")
wd="C:/Users/Daliang/Dropbox/ToolDevelop/github/egg" # work directory name
code.wd="C:/Users/Daliang/Dropbox/ToolDevelop/github/egg/Rcode" # the directory you save the Rcode
prefix="try" # project name
read.limit=100 # min reads per sample
gene="ITS" #ITS or 16S
its.conf=0.1 # ITS classification confidence threshold
memory.G=30 # memory limitation
# check following file names if you used other names.
com.file="otu_table.txt" # file name of otu table before resample
treat.file="treat.csv" # file name of treatment information
samplist.file="samplist.csv" # file for sample name correction
comr.file="otu_resampled.txt" # file name of otu table after resample
classif.file="classifier" # classification file
rm.samplist=NA # samples that need be removed. name as "remove.samp.csv"
## loading files ##
library(vegan)
memory.limit(size=memory.G*1024)
setwd(wd)
com.raw=read.table(file=paste("input/",com.file,sep=""),header=T,sep="\t",row.names=1);com.raw=t(com.raw)
if(grepl("tabular",com.file))
{
rownames(com.raw)=sub("abel.","",rownames(com.raw))
rownames(com.raw)=sub("_",".",rownames(com.raw))
}
dim(com.raw)
write.csv(data.frame(sample=rownames(com.raw)),file=paste("output/",prefix,".00.oldSampName.csv",sep=""))
samplist=read.table(file=paste("input/",samplist.file,sep=""),header=T,sep=",",row.names=1)
sum(is.na(match(samplist[,1],rownames(com.raw))))
## 0.1 ## prepare otu table for resample
source(file=paste(code.wd,"/minread.r",sep=""))
source(file=paste(code.wd,"/rename.samp.r",sep=""))
com.read=minread(com.raw,samplist,prefix,read.limit=read.limit,write.otu=TRUE,code.wd=code.wd)
com.b=com.read$com.okay
com.read$min.read
dim(com.b)
## loading file ##
com.a=read.table(file=paste("input/",comr.file,sep=""),header=T,sep="\t",row.names=1);com.a=t(com.a)
dim(com.a)
if(!is.na(rm.samplist))
{
source(file=paste(code.wd,"/rm.samp.r",sep=""))
com.a=rm.samp(com.a,rm.samplist)
com.b=rm.samp(com.b,rm.samplist)
}
treat=read.table(file=paste("input/",treat.file,sep=""),header=T,sep=",",row.names=1)
if(gene=="ITS")
{
source(file=paste(code.wd,"/tran.ITSrdp.r",sep=""))
classif.all=tran.ITSrdp(file=paste("input/",classif.file,".txt",sep=""),conf=its.conf)
classif=classif.all$taxa
}else{
classif=read.table(file=paste("input/",classif.file,".txt",sep=""),header=T,sep="\t",row.names=1)
}
classif
source(file=paste(code.wd,"/egg1.r",sep=""))
com.egg=egg1(comi=com.a,treat=treat,com.raw=com.b,classif=classif,level=5,env=NA,prefix,write.output=TRUE,code.wd=code.wd)
source(file=paste(code.wd,"/egg1.r",sep=""))
com.egg=egg1(comi=com.a,treat=treat,com.raw=com.b,classif=classif,level=5,env=NA,prefix,write.output=TRUE,code.wd=code.wd)
help(read.excel)
? excel
?？ excel
install.packages("gdata")
library(vegan)
library(gdata)
help(read.xls)
inp=read.xls(file="input/00.Input.xls")
inp=read.xls(xls="input/00.Input.xls")
stwd("C:/Users/Daliang/Dropbox/ToolDevelop/github/egg")
setwd("C:/Users/Daliang/Dropbox/ToolDevelop/github/egg")
inp=read.xls(xls="input/00.Input.xls")
inp=read.xls(xls="input/01.Input.xls")
inp=read.xls(xls="C:/Users/Daliang/Dropbox/ToolDevelop/github/egg/input/01.Input.xls")
inp=read.xls("C:/Users/Daliang/Dropbox/ToolDevelop/github/egg/input/01.Input.xls")
inp=read.xls("C:/Users/Daliang/Dropbox/ToolDevelop/github/egg/input/01.Input.xls",perl="perl")
help(xls2csv)
read.xls
install.packages("xlsx")
library(xlsx)
help(read.xlsx)
library(xlsx)
help(read.xls)
inp=read.xls("C:/Users/Daliang/Dropbox/ToolDevelop/github/egg/input/01.Input.xls")
inp=read.table(file="input/1.Input.csv",header=T,sep=",",row.names=1)
inp
inp[wd,]
inp['wd',]
inp['wd',1]
help(read.table)
inp=read.table(file="input/1.Input.csv",header=T,sep=",",row.names=1,as.is=TRUE)
inp[1,1]
inp[4,1]
as.numeric(inp[4,1])
inp[7,1]
inp[8,1]
inp[13,1]
rm.samplist=inp[13,1] # samples that need be removed. name as "remove.samp.csv"
is.na(rm.samplist)
setwd=("C:/Users/Daliang/Dropbox/ToolDevelop/github/egg")
setwd=("C:/Users/Daliang/Dropbox/ToolDevelop/github/egg")
# install.packages("vegan")
#########################################
## input ##
inp=read.table(file="input/1.Input.csv",header=T,sep=",",row.names=1,as.is=TRUE)
wd=inp[1,1]# work directory name
code.wd=inp[2,1] # the directory you save the Rcode
prefix=inp[3,1] # project name
read.limit=as.numeric(inp[4,1]) # min reads per sample
gene=inp[5,1] #ITS or 16S
its.conf=as.numeric(inp[6,1]) # ITS classification confidence threshold
memory.G=as.numeric(inp[7,1])# memory limitation
com.file=inp[8,1] # file name of otu table before resample
treat.file=inp[9,1] # file name of treatment information
samplist.file=inp[10,1] # file for sample name correction
comr.file=inp[11,1] # file name of otu table after resample
classif.file=inp[12,1] # classification file
rm.samplist=inp[13,1] # samples that need be removed. name as "remove.samp.csv"
## loading files ##
library(vegan)
memory.limit(size=memory.G*1024)
com.raw=read.table(file=paste("input/",com.file,sep=""),header=T,sep="\t",row.names=1);com.raw=t(com.raw)
if(grepl("tabular",com.file))
{
rownames(com.raw)=sub("abel.","",rownames(com.raw))
rownames(com.raw)=sub("_",".",rownames(com.raw))
}
dim(com.raw)
write.csv(data.frame(sample=rownames(com.raw)),file=paste("output/",prefix,".00.oldSampName.csv",sep=""))
samplist=read.table(file=paste("input/",samplist.file,sep=""),header=T,sep=",",row.names=1)
sum(is.na(match(samplist[,1],rownames(com.raw))))
## 0.1 ## prepare otu table for resample
source(file=paste(code.wd,"/minread.r",sep=""))
source(file=paste(code.wd,"/rename.samp.r",sep=""))
com.read=minread(com.raw,samplist,prefix,read.limit=read.limit,write.otu=TRUE,code.wd=code.wd)
com.b=com.read$com.okay
com.read$min.read
dim(com.b)
## loading file ##
com.a=read.table(file=paste("input/",comr.file,sep=""),header=T,sep="\t",row.names=1);com.a=t(com.a)
dim(com.a)
if(!is.na(rm.samplist))
{
source(file=paste(code.wd,"/rm.samp.r",sep=""))
com.a=rm.samp(com.a,rm.samplist)
com.b=rm.samp(com.b,rm.samplist)
}
treat=read.table(file=paste("input/",treat.file,sep=""),header=T,sep=",",row.names=1)
if(gene=="ITS")
{
source(file=paste(code.wd,"/tran.ITSrdp.r",sep=""))
classif.all=tran.ITSrdp(file=paste("input/",classif.file,sep=""),conf=its.conf)
classif=classif.all$taxa
}else{
classif=read.table(file=paste("input/",classif.file,sep=""),header=T,sep="\t",row.names=1)
}
## 1.1 ## basic diversity analysis, alpha, DCA, taxa overall composition
source(file=paste(code.wd,"/egg1.r",sep=""))
com.egg=egg1(comi=com.a,treat=treat,com.raw=com.b,classif=classif,level=5,env=NA,prefix,write.output=TRUE,code.wd=code.wd)
# please feel free to contact Daliang Ning (ningdaliang@gmail.com)
# If you use it, you may cite this version as
# Daliang Ning. 2015. Egg. Retrived Jun 1, 2015, from https://github.com/DaliangNing/egg
##### end ####
setwd=("C:/Users/Daliang/Dropbox/ToolDevelop/github/egg")
# install.packages("vegan")
#########################################
## input ##
inp=read.table(file="input/1.Input.csv",header=T,sep=",",row.names=1,as.is=TRUE)
wd=inp[1,1]# work directory name
code.wd=inp[2,1] # the directory you save the Rcode
prefix=inp[3,1] # project name
read.limit=as.numeric(inp[4,1]) # min reads per sample
gene=inp[5,1] #ITS or 16S
its.conf=as.numeric(inp[6,1]) # ITS classification confidence threshold
memory.G=as.numeric(inp[7,1])# memory limitation
com.file=inp[8,1] # file name of otu table before resample
treat.file=inp[9,1] # file name of treatment information
samplist.file=inp[10,1] # file for sample name correction
comr.file=inp[11,1] # file name of otu table after resample
classif.file=inp[12,1] # classification file
rm.samplist=inp[13,1] # samples that need be removed. name as "remove.samp.csv"
## loading files ##
library(vegan)
memory.limit(size=memory.G*1024)
com.raw=read.table(file=paste("input/",com.file,sep=""),header=T,sep="\t",row.names=1);com.raw=t(com.raw)
if(grepl("tabular",com.file))
{
rownames(com.raw)=sub("abel.","",rownames(com.raw))
rownames(com.raw)=sub("_",".",rownames(com.raw))
}
dim(com.raw)
write.csv(data.frame(sample=rownames(com.raw)),file=paste("output/",prefix,".00.oldSampName.csv",sep=""))
samplist=read.table(file=paste("input/",samplist.file,sep=""),header=T,sep=",",row.names=1)
sum(is.na(match(samplist[,1],rownames(com.raw))))
## 0.1 ## prepare otu table for resample
source(file=paste(code.wd,"/minread.r",sep=""))
source(file=paste(code.wd,"/rename.samp.r",sep=""))
com.read=minread(com.raw,samplist,prefix,read.limit=read.limit,write.otu=TRUE,code.wd=code.wd)
com.b=com.read$com.okay
com.read$min.read
dim(com.b)
## loading file ##
com.a=read.table(file=paste("input/",comr.file,sep=""),header=T,sep="\t",row.names=1);com.a=t(com.a)
dim(com.a)
if(!is.na(rm.samplist))
{
source(file=paste(code.wd,"/rm.samp.r",sep=""))
com.a=rm.samp(com.a,rm.samplist)
com.b=rm.samp(com.b,rm.samplist)
}
treat=read.table(file=paste("input/",treat.file,sep=""),header=T,sep=",",row.names=1)
if(gene=="ITS")
{
source(file=paste(code.wd,"/tran.ITSrdp.r",sep=""))
classif.all=tran.ITSrdp(file=paste("input/",classif.file,sep=""),conf=its.conf)
classif=classif.all$taxa
}else{
classif=read.table(file=paste("input/",classif.file,sep=""),header=T,sep="\t",row.names=1)
}
## 1.1 ## basic diversity analysis, alpha, DCA, taxa overall composition
source(file=paste(code.wd,"/egg1.r",sep=""))
com.egg=egg1(comi=com.a,treat=treat,com.raw=com.b,classif=classif,level=5,env=NA,prefix,write.output=TRUE,code.wd=code.wd)
# please feel free to contact Daliang Ning (ningdaliang@gmail.com)
# If you use it, you may cite this version as
# Daliang Ning. 2015. Egg. Retrived Jun 1, 2015, from https://github.com/DaliangNing/egg
##### end ####
read.limit
