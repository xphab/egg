data.day[,i+1]=data[,names(data)==f.day$Sample[i]]
}
############################
#Define data and env
data1=data.day
data2 <-t(data1[,2:ncol(data1)])
env=f.day$Temperature
(size=dim(data1))
dim(data2)
length(env)
############################
date()
"-----------"
options(max.print=5.5E6)
gfname=data1[,1] # for mantel test gfname=levels(data1[,1])
result=data.frame(matrix(0,nrow=length(gfname),ncol=2))
names(result)=c("genf","aov.p")
result[,1]=gfname
###each genefamily###
for (i in 1:length(gfname))
{
aov=aov(as.numeric(data1[i,2:ncol(data1)])~Temperature,data=f.day)
result[i,2]=summary(aov)[[1]][1,5]
message("now is i=",i,". Percentage ", 100*i/size[1],"%")
}
result
sink()
date()
"ok"
library(vegan)
data=read.table('J:/R/geochip/D-Dert/D260-Geochip/D260G-T5-cut3.csv',header=T, sep=",")#
factor=read.table('J:/R/geochip/D-Dert/D260-Geochip/TreatmentG.csv',header=T, sep=",")#
sink("J:/R/geochip/D-Dert/D260-Geochip/D260GT5cut3-ANOVA-genevsT-D43H.txt",append=FALSE,split=TRUE)
############################
#Pick up target
###################
day=43 ## which time point to analyze
group="H" ## which treatment to analyze
###################
f.day=factor[factor$Time==day&factor$Diversity==group,]
data.day=data.frame(matrix(0,nrow=nrow(data),ncol=nrow(f.day)+1))
data.day[,1]=data[,1]
names(data.day)=c("genf",f.day[,1])
for (i in 1:nrow(f.day)){
data.day[,i+1]=data[,names(data)==f.day$Sample[i]]
}
############################
#Define data and env
data1=data.day
data2 <-t(data1[,2:ncol(data1)])
env=f.day$Temperature
(size=dim(data1))
dim(data2)
length(env)
############################
date()
"-----------"
options(max.print=5.5E6)
gfname=data1[,1] # for mantel test gfname=levels(data1[,1])
result=data.frame(matrix(0,nrow=length(gfname),ncol=2))
names(result)=c("genf","aov.p")
result[,1]=gfname
###each genefamily###
for (i in 1:length(gfname))
{
aov=aov(as.numeric(data1[i,2:ncol(data1)])~Temperature,data=f.day)
result[i,2]=summary(aov)[[1]][1,5]
message("now is i=",i,". Percentage ", 100*i/size[1],"%")
}
result
sink()
date()
"ok"
q()
result=data.frame(matrix(nrow=14,ncol=3))
names(result)=c("Factor","proportion","Pvalue")
result[,1]=c("F1","F2","F3","F2F3","F1F3","F1F2","F1F2F3")
result
result=data.frame(matrix(nrow=7,ncol=3))
names(result)=c("Factor","proportion","Pvalue")
result[,1]=c("F1","F2","F3","F2F3","F1F3","F1F2","F1F2F3")
result
a[1]=3
a
b
c
d
d[1]=3
sink("j:/R/geochip/VPA-tryNew.txt",append=FALSE,split=TRUE)
date()
All=read.table('J:/R/geochip/CZ-DRcut0.4A.csv',header=T, sep=",")
a=8
b=a+11
All=All[,a:b]
dim(All)
T.All<-t(All)
dim(T.All)
All.group=read.table('j:/R/geochip/CZenvS-FG-correct.csv',header=T, sep=",")
Y=T.All
X=All.group[,2:ncol(All.group)]
dim(X)
library(vegan)
c=list()
p=list()
(c[[1]]=cca(Y ~ Fe+Cr6+SO4+Condition(Cd+Cr+TOC+NH4), data=X)) #1
(c[[2]]=cca(Y ~ Cd+Cr+Condition(Fe+Cr6+SO4+TOC+NH4), data=X)) #2
(c[[3]]=cca(Y ~ TOC+NH4+Condition(Fe+Cr6+SO4+Cd+Cr), data=X)) #3
(c[[4]]=cca(Y ~ Cd+Cr+TOC+NH4+Condition(Fe+Cr6+SO4), data=X)) #4
(c[[5]]=cca(Y ~ Fe+Cr6+SO4+TOC+NH4+Condition(Cd+Cr), data=X)) #5
(c[[6]]=cca(Y ~ Fe+Cr6+SO4+Cd+Cr+Condition(TOC+NH4), data=X)) #6
(c[[7]]=cca(Y ~ Fe+Cr6+SO4+Cd+Cr+TOC+NH4, data=X)) #7
(p[[1]]=anova(cca(Y ~ Fe+Cr6+SO4+Condition(Cd+Cr+TOC+NH4), data=X))) #1p
(p[[2]]=anova(cca(Y ~ Cd+Cr+Condition(Fe+Cr6+SO4+TOC+NH4), data=X))) #2p
(p[[3]]=anova(cca(Y ~ TOC+NH4+Condition(Fe+Cr6+SO4+Cd+Cr), data=X))) #3p
(p[[4]]=anova(cca(Y ~ Cd+Cr+TOC+NH4+Condition(Fe+Cr6+SO4), data=X))) #4p
(p[[5]]=anova(cca(Y ~ Fe+Cr6+SO4+TOC+NH4+Condition(Cd+Cr), data=X))) #5p
(p[[6]]=anova(cca(Y ~ Fe+Cr6+SO4+Cd+Cr+Condition(TOC+NH4), data=X))) #6p
(p[[7]]=anova(cca(Y ~ Fe+Cr6+SO4+Cd+Cr+TOC+NH4, data=X))) #7p
cp=matrix(nrow=7,ncol=1)
pv=cp
for(i in 1:7)
{
cp[i]=(summary(c[[i]])$constr.chi)/(summary(c[[i]])$tot.chi)
pv[i]=p[[i]][5][1,1]
}
result=data.frame(matrix(nrow=7,ncol=3))
names(result)=c("Factor","proportion","Pvalue")
result[,1]=c("F1","F2","F3","F2F3","F1F3","F1F2","F1F2F3")
result[1,2]=cp[1]
result[2,2]=cp[2]
result[3,2]=cp[3]
result[4,2]=cp[4]-cp[2]-cp[3]
result[5,2]=cp[5]-cp[1]-cp[3]
result[6,2]=cp[6]-cp[1]-cp[2]
result[7,2]=cp[7]-cp[1]-cp[2]-cp[3]-result[4,2]-result[5,2]-result[6,2]
reslut[,3]=pv
reslut
sink()
"ok"
result
result[,3]=pv
result
pv
c
p
sink("j:/R/geochip/VPA-tryNew.txt",append=FALSE,split=TRUE)
date()
"-----Proportions and P values----"
result
"-----cca detail results-----"
c
"-----Anova of cca detail results-----"
p
sink()
"ok"
cp=matrix(nrow=7,ncol=1)
pv=cp
for(i in 1:7)
{
cp[i]=(summary(c[[i]])$constr.chi)/(summary(c[[i]])$tot.chi)
pv[i]=p[[i]][5][1,1]
}
result=data.frame(matrix(nrow=7,ncol=3))
names(result)=c("Factor","proportion","Pvalue")
result[,1]=c("F1","F2","F3","F2F3","F1F3","F1F2","F1F2F3")
result[1,2]=cp[1]
result[2,2]=cp[2]
result[3,2]=cp[3]
result[4,2]=cp[4]-cp[2]-cp[3]
result[5,2]=cp[5]-cp[1]-cp[3]
result[6,2]=cp[6]-cp[1]-cp[2]
result[7,2]=cp[7]-cp[1]-cp[2]-cp[3]-result[4,2]-result[5,2]-result[6,2]
result[,3]=pv
sink("j:/R/geochip/VPA-tryNew.txt",append=FALSE,split=TRUE)
date()
"-----Proportions and P values----"
result
"-----cca detail results-----"
c
"-----Anova of cca detail results-----"
p
sink()
"ok"
q()
Phy=read.table('j:/R/geochip/D260-16SvsGeo/D260-genus.csv',header=T, sep=",")# RENEW IT
Phy=read.table('j:/R/geochip/D-Dert/D260-16SvsGeo/D260-genus.csv',header=T, sep=",")# RENEW IT
dim(Phy)
Fun=read.table('j:/R/geochip/D-Dert/D260-16SvsGeo/D260-Geo-genus.csv',header=T, sep=",")# RENEW IT
Fun=read.table('j:/R/geochip/D-Dert/D260-16SvsGeo/D260-Geo-genus.csv',header=T, sep=",")# RENEW IT
dim(Fun)
c=c(1,1,2,3,2,1,2,3,4,5)
levels(c)
level(c)
help(levels)
gl(2,4,6)
help(gl)
c
levels(c)
a=gl(2,4)
a
levels(a)
genus.phy=levels(Phy[,2])
genus.phy
help(%in%)
help(in)
genus.phy %in% genus.Fun
genus.phy[,1] %in% genus.Fun[,1]
help(match)
1:10 %in% c(1,3,5,9)
c(1,2) %in% c(1,3,5,9)
genus.phy %in% genus.Fun
genus.Fun=levels(Fun[,2])
genus.phy %in% genus.Fun
genus.com=genus.phy[genus.phy %in% genus.Fun]
genus.com
genus.phy
genus.fun=levels(Fun[,2])
genus.com=genus.phy[genus.phy %in% genus.fun]
genus.com2=genus.fun(genus.fun %in% genus.phy)
genus.com2=genus.fun[genus.fun %in% genus.phy]
length(genus.com)
length(genus.com2)
i=1
gen=genus.com[1]
gen
Phy.gen=Phy[Phy[,2]==gen,3:ncol(Phy)]
dim(Phy.gen)
Phy.gen=Phy[Phy[,2]==gen,2:ncol(Phy)]
dim(Phy.gen)
Phy.gen
A=read.table("clipboard",header=TRUE)
B=read.table("clipboard",header=TRUE)
corr=data.frame(matrix(nrow=ncol(A),ncol=ncol(B)))#pre define
row.names(corr)=names(A)
names(corr)=names(B)
corp=corr
for (i in 1:ncol(A))
{
for (j in 1:ncol(B))
{
cor=cor.test(A[,i],B[,j])
corr[i,j]=cor$estimate
corp[i,j]=cor$p.value
}
}
corr
corp
B=read.table("clipboard",header=TRUE)
corr=data.frame(matrix(nrow=ncol(A),ncol=ncol(B)))#pre define
row.names(corr)=names(A)
names(corr)=names(B)
corp=corr
for (i in 1:ncol(A))
{
for (j in 1:ncol(B))
{
cor=cor.test(A[,i],B[,j])
corr[i,j]=cor$estimate
corp[i,j]=cor$p.value
}
}
corr
corp
dim(Phy.gen)
Phy.gen=Phy[Phy[,2]==gen,c(1,3:ncol(Phy))]
dim(Phy.gen)
Phy.gen[1,1]
Phy.gen[1,]
Fun.gen=Fun[Fun[,2]==gen,c(1,3:ncol(Fun))]
dim(Fun.gen)
nrow=(Phy.gen)
nrow(Phy.gen)
(n.phy=nrow(Phy.gen))
(n.fun=dim(Fun.gen))
(n.fun=nrow(Fun.gen))
result=list()
result[1]=c(1,2,3)
result[2]=c(3,4,5)
result
result[1]=t(c(1,2,3))
result[1]=data.frame(c,c,c)
result
c
result[1]=data.frame(matrix(0,2,3))
result
result[[1]]=data.frame(matrix(0,2,3))
result
help(sumrow)
help(sum)
colsums(Fun.gen)
colSums(Fun.gen)
colSums(Fun.gen[,2:ncol(Fun.gen)])
sum.fun=colSums(Fun.gen[,2:ncol(Fun.gen)])
dim(sum.fun)
length(sum.fun)
x <- cbind(x1 = 3, x2 = c(4:1, 2:5))
x
rowSums(x); colSums(x)
dimnames(x)
x
dimnames(x)[[1]] <- letters[1:8]
x
dimnames(x)[[2]]<-c("y","yy")
x
rowSums(x); colSums(x); rowMeans(x); colMeans(x)
x[] <- as.integer(x)
x
help(as.integer)
rowSums(x); colSums(x)
x[1,1]=2.3
x
x[] <- as.integer(x)
x
x[1,1]=2.8
x
x[] <- as.integer(x)
x
x[] <- x < 3
x
x
x
c
rbind(x,c)
c=t(c)
c
rbind(x,c)
cbind(x,c)
rbind(x,c[,2:3])
b=rbind(x,c[,2:3])
dimnames(b)
c=1:8
c
c("fum",c)
Fun.gen=rbind(c("sum.fun",colSums(Fun.gen[,2:ncol(Fun.gen)])),Fun.gen)
Fun.gen[,1]
Fun.gen=rbind(c("sum",colSums(Fun.gen[,2:ncol(Fun.gen)])),Fun.gen)
Fun.gen=Fun[Fun[,2]==gen,c(1,3:ncol(Fun))]
Fun.gen=rbind(c("sum",colSums(Fun.gen[,2:ncol(Fun.gen)])),Fun.gen)
sum.fun=colSums(Fun.gen[,2:ncol(Fun.gen)])
length(sum.fun)
length(genus.com)
res.r[[1]]=data.frame(matrix(NA,length(genus.com),length(genus.com)))
res.r=list()
res.r[[1]]=data.frame(matrix(NA,length(genus.com),length(genus.com)))
res.r
res.r[[1]][1:3,1:3]
res.r=list()
res.r[[1]]=data.frame(genus=genus.com,1:length(genus.com))
res.r
i=1
gen=genus.com[i]
Phy.gen=Phy[Phy[,2]==gen,c(1,3:ncol(Phy))]
(n.phy=nrow(Phy.gen))
Fun.gen=Fun[Fun[,2]==gen,c(1,3:ncol(Fun))]
(n.fun=nrow(Fun.gen))
sum.phy=colSums(Phy.gen[,2:ncol(Phy.gen)])
sum.fun=colSums(Fun.gen[,2:ncol(Fun.gen)])
cor=cor.test(as.numeric(sum.phy),as.numeric(sum.fun),method="pearson")
res.r[[1]][i,2]=cor$estimate
res.p[[1]][i,2]=cor$p.value
res.p=res.r
res.p[[1]][i,2]=cor$p.value
res.r
res.p
res.r[[1]][i,2]
res.p[[1]][i,2]
message(i)
message("now i=",i)
for(i in 1:length(genus.com))
{
gen=genus.com[i]
Phy.gen=Phy[Phy[,2]==gen,c(1,3:ncol(Phy))]
(n.phy=nrow(Phy.gen))
Fun.gen=Fun[Fun[,2]==gen,c(1,3:ncol(Fun))]
(n.fun=nrow(Fun.gen))
sum.phy=colSums(Phy.gen[,2:ncol(Phy.gen)])
sum.fun=colSums(Fun.gen[,2:ncol(Fun.gen)])
cor=cor.test(as.numeric(sum.phy),as.numeric(sum.fun),method="pearson")
res.r[[1]][i,2]=cor$estimate
res.p[[1]][i,2]=cor$p.value
message("now i=",i)
}
res.p[[1]]
res.p[[1]]<0.05
sum(res.p[[1]][,2]<0.05)
res.r=list()
res.r[[1]]=data.frame(genus=genus.com,sumFun=1:length(genus.com),meanFun=1:length(genus.com))
res.p=res.r
Fun.gen
dim(Fun.gen)
(n.fun=nrow(Fun.gen))
(n.phy=nrow(Phy.gen))
i
a=data.frame(x1=1:4,x2=0:3)
a
help(colSums)
colMeans(a)
colMeans(a[a>0])
colMeans(a[a[]>0])
colMeans(a[ha[]>0])
help(count)
a>0
colSums(a>0)
cloSums(a)
colSums(a)
colSums(a)/colSums(a>0)
a
b=a>0
b
a/b
colMeans(a/b)
colSums(Fun.gen[,2:ncol(Fun.gen)]>0)
colSums(Phy.gen[,2:ncol(Fun.gen)]>0)
i
if(i>1){j=0}else{j=1}
j
if(i>{j=0}else{j=1}
ls()
rm(list=ls(all=TRUE))
q()
setwd("C:/Users/Daliang/Dropbox/ToolDevelop/github/egg")
# install.packages("vegan")
#########################################
## input ##
inp=read.table(file="input/1.Input.csv",header=T,sep=",",row.names=1,as.is=TRUE)
wd=inp[1,1]# work directory name
code.wd=inp[2,1] # the directory you save the Rcode
prefix=inp[3,1] # project name
read.limit=as.numeric(inp[4,1]) # min reads per sample
gene=inp[5,1] #ITS or 16S
its.conf=as.numeric(inp[6,1]) # ITS classification confidence threshold
memory.G=as.numeric(inp[7,1])# memory limitation
com.file=inp[8,1] # file name of otu table before resample
treat.file=inp[9,1] # file name of treatment information
samplist.file=inp[10,1] # file for sample name correction
comr.file=inp[11,1] # file name of otu table after resample
classif.file=inp[12,1] # classification file
rm.samplist=inp[13,1] # samples that need be removed. name as "remove.samp.csv"
prep.resamp=inp[14,1]
statement.yn=inp[15,1]
alpha.yn=inp[16,1]
DCA.yn=inp[17,1]
Dissim.yn=inp[18,1]
taxa.yn=inp[19,1]
ieg.yn=inp[20,1]
cateDCA.list=inp[20,1]
cateDCA.list
source('C:/Users/Daliang/Dropbox/ToolDevelop/github/egg/Rcode/main.r', echo=TRUE)
a
c("a","b")=1:2
help("assign")
assign(a,1)
setwd("C:/Users/Daliang/Dropbox/ToolDevelop/github/egg")
source('C:/Users/Daliang/Dropbox/ToolDevelop/github/egg/Rcode/main.r', echo=TRUE)
cateDCA.g
rownames(cateDCA.g)
comi=com.a
comm=comi[,colSums(comi)>0]
comm.raw=com.raw[,colSums(com.raw)>0]
sp.name=colnames(comm)
sp.num=ncol(comm)
samp.name=rownames(comm)
reads.t=sum(comm)
samp.num=nrow(comm)
resamp.read=rowSums(comm)
cateDCA=list()
for (i in 1:ncol(cateDCA.g))
i=1
j=1
cateDCA[[i]]=list()
cate.lev=levels(as.factor(as.vector(cateDCA.g[,i])))
if(!is.null(nrow(cateDCA.g)))
{
cateDCA.g=cateDCA.g[match(sp.name,rownames(cateDCA.g))]
}
cateDCA.g=cateDCA.g[match(sp.name,rownames(cateDCA.g))]
cateDCA.g=cateDCA.g[match(sp.name,rownames(cateDCA.g)),]
source('C:/Users/Daliang/Dropbox/ToolDevelop/github/egg/Rcode/main.r', echo=TRUE)
?? lowercase
?? upcase
?? uppercase
source('C:/Users/Daliang/Dropbox/ToolDevelop/github/egg/Rcode/main.r', echo=TRUE)
cateDCA.list
cateDCA.g
nrow(cateDCA.g)
is.null(nrow(cateDCA.g))
ncol(cateDCA.g)
cate.lev
i=1
cate.lev=levels(as.factor(as.vector(cateDCA.g[,i])))
cate.lev
comi=com.a
dim(comi)
comm=comi[,colSums(comi)>0]
comm.raw=com.raw[,colSums(com.raw)>0]
# taxa number
message("now calculating total number of taxa, sequences and samples. ",date())
sp.name=colnames(comm)
sp.num=ncol(comm)
samp.name=rownames(comm)
reads.t=sum(comm)
samp.num=nrow(comm)
resamp.read=rowSums(comm)
if(!is.null(nrow(cateDCA.g)))
{
cateDCA.g=cateDCA.g[match(sp.name,rownames(cateDCA.g)),]
}
dim(cateDCA.g)
sum(sp.name!=rownames(cateDCA.g))
cateDCA.g
source('C:/Users/Daliang/Dropbox/ToolDevelop/github/egg/Rcode/main.r', echo=TRUE)
source('C:/Users/Daliang/Dropbox/ToolDevelop/github/egg/Rcode/main.r', echo=TRUE)
